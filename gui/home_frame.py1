# gui/home_frame.py
import customtkinter as ctk
from tkinter import ttk, messagebox, Menu
import subprocess
import webbrowser
from utils.printer_utils import PrinterManager
from utils.ad_utils import search_groups, check_password_ldap_with_auth  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

class HomeFrame(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        self.parent = parent  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è (App)
        self.grid_columnconfigure((0, 3, 4), weight=1)
        self.grid_columnconfigure((1, 2), weight=0)
        self.grid_rowconfigure((0, 1, 2, 3), weight=0)
        self.grid_rowconfigure(3, weight=1)
        
        # Session controls
        self.server_entry = ctk.CTkEntry(self, width=150)
        self.server_entry.insert(0, "TS-IT0")
        self.server_entry.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        self.refresh_button = ctk.CTkButton(self, text="Refresh", command=self.refresh_sessions)
        self.refresh_button.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        self.combobox_domain = ctk.CTkComboBox(self, values=["corp.local", "nd.lan"])
        self.combobox_domain.set("corp.local")  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é corp.local
        self.combobox_domain.grid(row=1, column=0, padx=5, pady=5, sticky="w")
        
        # –ü–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–æ–ª—è
        self.password_status_entry = ctk.CTkEntry(self, width=300, placeholder_text="–°—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è")
        self.password_status_entry.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="w")
        
        # Session Treeview
        self.session_frame = ctk.CTkFrame(self)
        self.session_frame.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")
        self.session_frame.grid_rowconfigure(0, weight=1)
        self.session_frame.grid_columnconfigure(0, weight=1)
        
        self.tree = ttk.Treeview(self.session_frame, columns=("SessionName", "Username", "SessionID", "Status"),
                               show="headings", height=10)
        self.tree.grid(row=0, column=0, sticky="nsew")
        self.setup_treeview()
        
        # Group search
        self.group_search_entry = ctk.CTkEntry(self, width=200, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
        self.group_search_entry.grid(row=2, column=3, padx=5, pady=5, sticky="w")
        
        self.search_groups_button = ctk.CTkButton(self, text="üîç", width=30,
                                               command=lambda: (search_groups(self), check_password_ldap_with_auth(self)))
        self.search_groups_button.grid(row=2, column=3, padx=(0, 5), pady=5, sticky="e")
        
        # Groups Treeview
        self.group_frame = ctk.CTkFrame(self)
        self.group_frame.grid(row=3, column=3, padx=5, pady=5, sticky="nsew")
        self.group_frame.grid_rowconfigure(0, weight=1)
        self.group_frame.grid_columnconfigure(0, weight=1)
        
        self.group_tree = ttk.Treeview(self.group_frame, columns=("GroupName",), show="headings", height=10)
        self.group_tree.grid(row=0, column=0, sticky="nsew")
        self.group_tree.heading("GroupName", text="Group Name")
        self.group_tree.column("GroupName", width=250, stretch=True)
        
        # Printers
        self.printer_manager = PrinterManager(self)
        self.printer_manager.setup_ui(row=2, column=4, tree_row=3)
        
        # Context menu
        self.context_menu = Menu(self, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selected_item)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", command=self.open_printer_web_interface)
        
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.group_tree.bind("<Button-3>", self.show_context_menu)
        self.printer_manager.tree.bind("<Button-3>", self.show_context_menu)
        
        self.tree.bind("<Double-1>", self.connect_to_session)
        
        self.update_treeview_style(ctk.get_appearance_mode())
        
        self.refresh_sessions()
        self.update_idletasks()
        

    def setup_treeview(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è self.tree
        for col in ["SessionName", "Username", "SessionID", "Status"]:
            self.tree.heading(col, text=col.replace("SessionID", "Session ID"))
            self.tree.column(col, width=100, stretch=True)

    def update_treeview_style(self, appearance_mode):
        style = ttk.Style()
        style.theme_use("clam")
        if appearance_mode == "Dark":
            style.configure("Treeview",
                           background="#2e2e2e",
                           foreground="white",
                           fieldbackground="#2e2e2e")
            style.configure("Treeview.Heading",
                           background="#3c3c3c",
                           foreground="white")
            style.map("Treeview", background=[('selected', '#5f5f5f')])
        else:
            style.configure("Treeview",
                           background="white",
                           foreground="black",
                           fieldbackground="white")
            style.configure("Treeview.Heading",
                           background="lightgray",
                           foreground="black")
            style.map("Treeview", background=[('selected', '#cfcfcf')])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–æ –≤—Å–µ–º Treeview
        self.tree.configure(style="Treeview")
        self.group_tree.configure(style="Treeview")
        self.printer_manager.tree.configure(style="Treeview")

    def refresh_sessions(self):
        server = self.server_entry.get().strip()
        if not server:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        try:
            output = subprocess.check_output(f"qwinsta /server:{server}", shell=True, stderr=subprocess.STDOUT).decode("cp866")
            self.tree.delete(*self.tree.get_children())
            lines = output.splitlines()[1:]
            if not lines or "SESSIONNAME" in output:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {server} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return
            for line in lines:
                session_data = line.split()
                if len(session_data) >= 4:
                    self.tree.insert("", "end", values=(session_data[0], session_data[1], 
                                                      session_data[2], session_data[3]))
        except subprocess.CalledProcessError as e:
            error_output = e.output.decode("cp866") if e.output else str(e)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è {server}: {error_output}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def show_context_menu(self, event):
        self.context_menu.post(event.x_root, event.y_root)

    def copy_selected_item(self):
        tree = self.get_focused_treeview()
        if tree:
            selected_item = tree.selection()
            if selected_item:
                item_values = tree.item(selected_item, "values")
                if item_values:
                    self.clipboard_clear()
                    self.clipboard_append("\t".join(map(str, item_values)))
                    self.update()

    def open_printer_web_interface(self):
        tree = self.get_focused_treeview()
        if tree == self.printer_manager.tree:
            selected_item = tree.selection()
            if selected_item:
                item_values = tree.item(selected_item, "values")
                if item_values and len(item_values) > 1:
                    ip_address = item_values[1]
                    if ip_address:
                        webbrowser.open(f"http://{ip_address}")

    def get_focused_treeview(self):
        focused_widget = self.focus_get()
        if focused_widget in [self.tree, self.group_tree, self.printer_manager.tree]:
            return focused_widget
        return None

    def connect_to_session(self, event):
        selected_item = self.tree.selection()
        if selected_item:
            session_id = self.tree.item(selected_item, "values")[2]
            server = self.server_entry.get()
            subprocess.run(f"mstsc /v:{server} /shadow:{session_id} /control", shell=True)