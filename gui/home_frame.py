import customtkinter as ctk
from tkinter import ttk, messagebox, Menu
import subprocess
import webbrowser
import re
import threading
import queue
from typing import Dict, List, Optional, Tuple
from utils.printer_utils import PrinterManager
from utils.ad_utils import search_groups, check_password_ldap_with_auth
import logging

logger = logging.getLogger(__name__)

class TabHomeFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å RDP —Å–µ—Å—Å–∏—è–º–∏."""
    
    def __init__(self, parent, tab_name: str, app, load_from_config: bool = False, 
                 config_data: Optional[Dict] = None):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        
        self.parent = parent
        self.tab_name = tab_name
        self.app = app
        self.load_from_config = load_from_config
        self.config_data = config_data or {}
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.async_queue = queue.Queue()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self._setup_grid()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._create_widgets()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_styles()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self._bind_events()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not self.load_from_config:
            self.after(100, self.refresh_sessions)
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        self._process_queue()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        self.after(100, self._adjust_columns_width)
    
    def _setup_grid(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Ñ—Ä–µ–π–º–∞."""
        self.grid_columnconfigure((0, 3, 4), weight=1)
        self.grid_columnconfigure((1, 2), weight=0)
        self.grid_rowconfigure((0, 1, 2, 3), weight=0)
        self.grid_rowconfigure(4, weight=1)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤."""
        self._create_session_controls()
        self._create_session_treeview()
        self._create_group_controls()
        self._create_group_treeview()
        self._create_printer_section()
        self._create_tab_controls()
        self._create_context_menu()
    
    def _create_session_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏."""
        # –§—Ä–µ–π–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        server_frame = ctk.CTkFrame(self, fg_color="transparent")
        server_frame.grid(row=0, column=0, columnspan=2, padx=5, pady=5, sticky="w")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_entry = ctk.CTkEntry(
            server_frame, 
            width=150,
            placeholder_text="–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞"
        )
        self.server_entry.pack(side="left", padx=(0, 5))
        self.server_entry.insert(0, self.config_data.get("server", "TS-IT0"))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = ctk.CTkButton(
            server_frame, 
            text="–û–±–Ω–æ–≤–∏—Ç—å", 
            command=self.refresh_sessions,
            width=100
        )
        self.refresh_button.pack(side="left")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label = ctk.CTkLabel(
            server_frame,
            text="",
            text_color=("gray50", "gray70")
        )
        self.loading_label.pack(side="left", padx=(10, 0))
        
        # –í—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞
        self.combobox_domain = ctk.CTkComboBox(
            self, 
            values=["corp.local", "nd.lan"],
            width=150
        )
        self.combobox_domain.set(self.config_data.get("domain", "nd.lan"))
        self.combobox_domain.grid(row=1, column=0, padx=5, pady=5, sticky="w")
        
        # –°—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è
        self.password_status_entry = ctk.CTkEntry(
            self, 
            width=300, 
            placeholder_text="–°—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è",
            state="readonly"
        )
        self.password_status_entry.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="w")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
        status = self.config_data.get("password_status", "")
        if status:
            self.password_status_entry.configure(state="normal")
            self.password_status_entry.insert(0, status)
            self.password_status_entry.configure(state="readonly")
    
    def _create_session_treeview(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π."""
        # –§—Ä–µ–π–º –¥–ª—è Treeview
        self.session_frame = ctk.CTkFrame(self)
        self.session_frame.grid(row=4, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")
        self.session_frame.grid_rowconfigure(0, weight=1)
        self.session_frame.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview
        columns = ("SessionName", "Username", "SessionID", "Status")
        self.tree = ttk.Treeview(
            self.session_frame, 
            columns=columns,
            show="headings", 
            height=10
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_config = {
            "SessionName": ("–ò–º—è —Å–µ—Å—Å–∏–∏", 0.25),    # 25% —à–∏—Ä–∏–Ω—ã
            "Username": ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 0.35),     # 35% —à–∏—Ä–∏–Ω—ã
            "SessionID": ("ID —Å–µ—Å—Å–∏–∏", 0.15),       # 15% —à–∏—Ä–∏–Ω—ã
            "Status": ("–°—Ç–∞—Ç—É—Å", 0.25)              # 25% —à–∏—Ä–∏–Ω—ã
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.session_column_config = column_config
        
        for col, (heading, _) in column_config.items():
            self.tree.heading(col, text=heading)
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            self.tree.column(col, width=100, stretch=True)
        
        
        self.tree.grid(row=0, column=0, sticky="nsew")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.session_frame.bind("<Configure>", self._on_session_frame_resize)
    
    def _create_group_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏."""
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        group_frame = ctk.CTkFrame(self, fg_color="transparent")
        group_frame.grid(row=2, column=3, padx=5, pady=5, sticky="w")
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.group_search_entry = ctk.CTkEntry(
            group_frame, 
            width=200, 
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
        )
        self.group_search_entry.pack(side="left", padx=(0, 5))
        self.group_search_entry.insert(0, self.config_data.get("group_search", ""))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_groups_button = ctk.CTkButton(
            group_frame, 
            text="üîç", 
            width=30, 
            command=self.handle_group_search
        )
        self.search_groups_button.pack(side="left")
    
    def _create_group_treeview(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø."""
        # –§—Ä–µ–π–º –¥–ª—è Treeview
        self.group_frame = ctk.CTkFrame(self)
        self.group_frame.grid(row=4, column=3, padx=5, pady=5, sticky="nsew")
        self.group_frame.grid_rowconfigure(0, weight=1)
        self.group_frame.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview
        self.group_tree = ttk.Treeview(
            self.group_frame, 
            columns=("GroupName",), 
            show="headings", 
            height=10
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.group_tree.heading("GroupName", text="–ì—Ä—É–ø–ø–∞")
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        self.group_tree.column("GroupName", width=300, stretch=True)
        
        
        self.group_tree.grid(row=0, column=0, sticky="nsew")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        if self.load_from_config and "groups" in self.config_data:
            for group in self.config_data.get("groups", []):
                if group:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    self.group_tree.insert("", "end", values=group)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.group_frame.bind("<Configure>", self._on_group_frame_resize)
    
    def _create_printer_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."""
        self.printer_manager = PrinterManager(self)
        self.printer_manager.setup_ui(
            row=2, 
            column=4, 
            tree_row=4,
            tree_columns=self.config_data.get("printer_tree_columns", {})
        )
        
        # –ü—Ä–∏–Ω—Ç–µ—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ printers.json
        # –∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ —Å–µ—Ä–≤–µ—Ä—É –≤ PrinterManager
    
    def _create_tab_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
        self.tab_buttons_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.tab_buttons_frame.grid(row=0, column=4, padx=5, pady=5, sticky="ne")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        self.add_tab_button = ctk.CTkButton(
            self.tab_buttons_frame, 
            text="‚ûï –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞", 
            command=self.add_new_tab,
            width=120
        )
        self.add_tab_button.pack(side="left", padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        self.delete_tab_button = ctk.CTkButton(
            self.tab_buttons_frame, 
            text="‚úñ", 
            width=30, 
            command=self.delete_current_tab,
            fg_color="transparent",
            hover_color=("gray70", "gray30")
        )
        self.delete_tab_button.pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        self.rename_tab_button = ctk.CTkButton(
            self, 
            text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", 
            command=self.rename_tab, 
            width=175, 
            height=30
        )
        self.rename_tab_button.grid(row=1, column=4, padx=5, pady=5, sticky="ne")
    
    def _create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        self.context_menu = Menu(self, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selected_item)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É", command=self.copy_entire_row)
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
            command=self.open_printer_web_interface
        )
        self.context_menu.add_separator()
        self.context_menu.add_command(
            label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏", 
            command=lambda: self.connect_to_session(None)
        )
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π."""
        self.update_treeview_style(ctk.get_appearance_mode())
    
    def _bind_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π."""
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.server_entry.bind("<Return>", lambda e: self.refresh_sessions())
        self.group_search_entry.bind("<Return>", lambda e: self.handle_group_search())
        
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü
        self.tree.bind("<Double-1>", self.connect_to_session)
        self.group_tree.bind("<Double-1>", self.on_group_double_click)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.group_tree.bind("<Button-3>", self.show_context_menu)
        self.printer_manager.tree.bind("<Button-3>", self.show_context_menu)
    
    def _process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏."""
        try:
            while True:
                callback = self.async_queue.get_nowait()
                callback()
        except queue.Empty:
            pass
        finally:
            self.after(100, self._process_queue)
    
    def show_loading(self, text: str = "–ó–∞–≥—Ä—É–∑–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.loading_label.configure(text=text)
        self.refresh_button.configure(state="disabled")
    
    def hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.loading_label.configure(text="")
        self.refresh_button.configure(state="normal")
    
    def refresh_sessions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ RDP —Å–µ—Å—Å–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        server = self.server_entry.get().strip()
        if not server:
            self.app.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        self.show_loading("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π...")
        
        def worker():
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É qwinsta
                result = subprocess.run(
                    f"qwinsta /server:{server}",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode != 0:
                    error_msg = result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    self.async_queue.put(
                        lambda: self._handle_session_error(server, error_msg)
                    )
                    return
                
                # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                sessions = self._parse_qwinsta_output(result.stdout)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.async_queue.put(
                    lambda: self._update_session_tree(sessions)
                )
                
            except subprocess.TimeoutExpired:
                self.async_queue.put(
                    lambda: self._handle_session_error(server, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                )
            except Exception as e:
                self.async_queue.put(
                    lambda: self._handle_session_error(server, str(e))
                )
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=worker, daemon=True)
        thread.start()
    
    def _parse_qwinsta_output(self, output: str) -> List[Tuple[str, str, str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã qwinsta."""
        sessions = []
        lines = output.splitlines()
        
        if len(lines) < 2:
            return sessions
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for line in lines[1:]:
            if not line.strip():
                continue
            
            # –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            parts = line.split()
            if len(parts) >= 4:
                session_name = parts[0]
                username = parts[1] if not parts[1].isdigit() else ""
                session_id = next((p for p in parts[1:] if p.isdigit()), "")
                status = parts[-1] if len(parts) > 3 else "Unknown"
                
                sessions.append((session_name, username, session_id, status))
        
        return sessions
    
    def _update_session_tree(self, sessions: List[Tuple[str, str, str, str]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π."""
        self.hide_loading()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.tree.delete(*self.tree.get_children())
        
        if not sessions:
            self.app.show_info(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.server_entry.get()} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
        for session in sessions:
            self.tree.insert("", "end", values=session)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π")
    
    def _handle_session_error(self, server: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π."""
        self.hide_loading()
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –¥–ª—è {server}: {error}")
        self.app.show_error(
            "–û—à–∏–±–∫–∞", 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è {server}:\n{error}"
        )
    
    def handle_group_search(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø."""
        if not self.group_search_entry.get().strip():
            self.app.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø
        search_groups(self, self.app)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        check_password_ldap_with_auth(self, self.app)
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        self.set_user_server_from_groups()
    
    def set_user_server_from_groups(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º."""
        for item in self.group_tree.get_children():
            group_name = self.group_tree.item(item, "values")[0]
            match = re.search(r'(TS-.+)', group_name)
            if match:
                server_short = match.group(1)
                self.server_entry.delete(0, "end")
                self.server_entry.insert(0, server_short)
                self.refresh_sessions()
                break
    
    def on_group_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ."""
        selected_item = self.group_tree.selection()
        if not selected_item:
            return
        
        group_name = self.group_tree.item(selected_item[0], "values")[0]
        match = re.search(r'(TS-.+)', group_name)
        if match:
            server_short = match.group(1)
            self.server_entry.delete(0, "end")
            self.server_entry.insert(0, server_short)
            self.refresh_sessions()
    
    def connect_to_session(self, event):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π RDP —Å–µ—Å—Å–∏–∏."""
        selected_item = self.tree.selection()
        if not selected_item:
            return
        
        try:
            session_id = self.tree.item(selected_item[0], "values")[2]
            server = self.server_entry.get()
            
            # –ó–∞–ø—É—Å–∫ mstsc –¥–ª—è shadow –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            cmd = f"mstsc /v:{server} /shadow:{session_id} /control"
            subprocess.Popen(cmd, shell=True)
            
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ {session_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏: {e}")
            self.app.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏: {e}")
    
    def show_context_menu(self, event):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –¥–µ—Ä–µ–≤–æ –∞–∫—Ç–∏–≤–Ω–æ
        tree = event.widget
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = tree.identify_row(event.y)
        if item:
            tree.selection_set(item)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        if tree == self.printer_manager.tree:
            self.context_menu.entryconfig("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", state="normal")
            self.context_menu.entryconfig("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏", state="disabled")
        elif tree == self.tree:
            self.context_menu.entryconfig("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", state="disabled")
            self.context_menu.entryconfig("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏", state="normal")
        else:
            self.context_menu.entryconfig("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", state="disabled")
            self.context_menu.entryconfig("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏", state="disabled")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        self.context_menu.post(event.x_root, event.y_root)
    
    def copy_selected_item(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        tree = self.get_focused_treeview()
        if not tree:
            return
        
        selected_item = tree.selection()
        if not selected_item:
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            x = tree.winfo_pointerx() - tree.winfo_rootx()
            column_id = tree.identify_column(x)
            column_index = int(column_id.replace('#', '')) - 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            item_values = tree.item(selected_item[0], "values")
            if item_values and 0 <= column_index < len(item_values):
                value = str(item_values[column_index])
                self.clipboard_clear()
                self.clipboard_append(value)
                self.update()
                
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä: {value}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def copy_entire_row(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        tree = self.get_focused_treeview()
        if not tree:
            return
        
        selected_item = tree.selection()
        if not selected_item:
            return
        
        try:
            item_values = tree.item(selected_item[0], "values")
            if item_values:
                row_text = "\t".join(str(v) for v in item_values)
                self.clipboard_clear()
                self.clipboard_append(row_text)
                self.update()
                
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {row_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")
    
    def open_printer_web_interface(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
        if self.get_focused_treeview() != self.printer_manager.tree:
            return
        
        selected_item = self.printer_manager.tree.selection()
        if not selected_item:
            return
        
        try:
            item_values = self.printer_manager.tree.item(selected_item[0], "values")
            if item_values and len(item_values) > 1:
                ip_address = item_values[1]
                if ip_address:
                    webbrowser.open(f"http://{ip_address}")
                    logger.info(f"–û—Ç–∫—Ä—ã—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {ip_address}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    def get_focused_treeview(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Treeview."""
        focused = self.focus_get()
        if focused in [self.tree, self.group_tree, self.printer_manager.tree]:
            return focused
        return None
    
    def add_new_tab(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏."""
        self.app.home_frame.add_new_tab()
    
    def delete_current_tab(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏."""
        current_tab = self.app.home_frame.tabview.get()
        tab_names = list(self.app.home_frame.tabview._tab_dict.keys())
        
        if len(tab_names) <= 1:
            self.app.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∫–ª–∞–¥–∫—É!")
            return
        
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É '{current_tab}'?"
        )
        
        if confirm:
            self.app.home_frame.tabview.delete(current_tab)
            remaining_tabs = list(self.app.home_frame.tabview._tab_dict.keys())
            if remaining_tabs:
                self.app.home_frame.tabview.set(remaining_tabs[0])
            
            logger.info(f"–í–∫–ª–∞–¥–∫–∞ '{current_tab}' —É–¥–∞–ª–µ–Ω–∞")
    
    def rename_tab(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏."""
        current_tab = self.app.home_frame.tabview.get()
        
        # –î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        dialog = ctk.CTkInputDialog(
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{current_tab}':", 
            title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É"
        )
        new_name = dialog.get_input()
        
        if not new_name:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
        if new_name in self.app.home_frame.tabview._tab_dict:
            self.app.show_error("–û—à–∏–±–∫–∞", "–í–∫–ª–∞–¥–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        self.app.home_frame.rename_tab(current_tab, new_name)
        
        logger.info(f"–í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: '{current_tab}' -> '{new_name}'")
    
    def update_treeview_style(self, appearance_mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–∞–±–ª–∏—Ü."""
        style = ttk.Style()
        style.theme_use("clam")
        
        if appearance_mode == "Dark":
            bg_color = "#2b2b2b"
            fg_color = "#ffffff"
            select_bg = "#404040"
            heading_bg = "#333333"
        else:
            bg_color = "#ffffff"
            fg_color = "#000000"
            select_bg = "#e0e0e0"
            heading_bg = "#f0f0f0"
        
        style.configure(
            "Treeview",
            background=bg_color,
            foreground=fg_color,
            fieldbackground=bg_color,
            borderwidth=0
        )
        
        style.configure(
            "Treeview.Heading",
            background=heading_bg,
            foreground=fg_color,
            relief="flat"
        )
        
        style.map(
            "Treeview",
            background=[('selected', select_bg)],
            foreground=[('selected', fg_color)]
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º
        for tree in [self.tree, self.group_tree, self.printer_manager.tree]:
            tree.configure(style="Treeview")
    
    def get_treeview_column_widths(self, tree) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã."""
        return {col: tree.column(col, "width") for col in tree["columns"]}
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        pass
    
    def _adjust_columns_width(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞."""
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–∫–Ω–∞
        self.update_idletasks()
        
        # –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å–µ—Å—Å–∏–π
        if hasattr(self, 'session_frame') and self.session_frame.winfo_width() > 1:
            self._adjust_session_columns()
        
        # –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≥—Ä—É–ø–ø
        if hasattr(self, 'group_frame') and self.group_frame.winfo_width() > 1:
            self._adjust_group_columns()
        
        # –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        if hasattr(self, 'printer_manager') and hasattr(self.printer_manager, 'printer_frame'):
            if self.printer_manager.printer_frame.winfo_width() > 1:
                self._adjust_printer_columns()
    
    def _adjust_session_columns(self):
        """–ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É (–º–∏–Ω—É—Å —Å–∫—Ä–æ–ª–ª–±–∞—Ä)
            available_width = self.session_frame.winfo_width() - 20
            
            if available_width > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                saved_columns = self.config_data.get("session_tree_columns", {})
                
                if saved_columns and all(col in saved_columns for col in self.tree["columns"]):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    for col in self.tree["columns"]:
                        self.tree.column(col, width=saved_columns[col])
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    widths = {
                        "SessionName": int(available_width * 0.25),
                        "Username": int(available_width * 0.35),
                        "SessionID": int(available_width * 0.15),
                        "Status": int(available_width * 0.25)
                    }
                    
                    for col, width in widths.items():
                        self.tree.column(col, width=width)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å–µ—Å—Å–∏–π: {e}")
    
    def _adjust_group_columns(self):
        """–ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É (–º–∏–Ω—É—Å —Å–∫—Ä–æ–ª–ª–±–∞—Ä)
            available_width = self.group_frame.winfo_width() - 20
            
            if available_width > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                saved_columns = self.config_data.get("group_tree_columns", {})
                
                if saved_columns and "GroupName" in saved_columns:
                    self.group_tree.column("GroupName", width=saved_columns["GroupName"])
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É
                    self.group_tree.column("GroupName", width=available_width)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –≥—Ä—É–ø–ø: {e}")
    
    def _adjust_printer_columns(self):
        """–ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É (–º–∏–Ω—É—Å —Å–∫—Ä–æ–ª–ª–±–∞—Ä)
            available_width = self.printer_manager.printer_frame.winfo_width() - 20
            
            if available_width > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                saved_columns = self.config_data.get("printer_tree_columns", {})
                
                if saved_columns and all(col in saved_columns for col in self.printer_manager.tree["columns"]):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    for col in self.printer_manager.tree["columns"]:
                        self.printer_manager.tree.column(col, width=saved_columns[col])
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
                    widths = {
                        "Printer": int(available_width * 0.40),
                        "IP": int(available_width * 0.25),
                        "Server": int(available_width * 0.20),
                        "Status": int(available_width * 0.15)
                    }
                    
                    for col, width in widths.items():
                        if col in self.printer_manager.tree["columns"]:
                            self.printer_manager.tree.column(col, width=width)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    def _on_session_frame_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–µ–π–º–∞ —Å–µ—Å—Å–∏–π."""
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if hasattr(self, '_resize_job'):
            self.after_cancel(self._resize_job)
        self._resize_job = self.after(150, self._adjust_session_columns)
    
    def _on_group_frame_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–µ–π–º–∞ –≥—Ä—É–ø–ø."""
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if hasattr(self, '_group_resize_job'):
            self.after_cancel(self._group_resize_job)
        self._group_resize_job = self.after(150, self._adjust_group_columns)


class HomeFrame(ctk.CTkFrame):
    """–ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º —Å –≤–∫–ª–∞–¥–∫–∞–º–∏."""
    
    def __init__(self, parent, app, load_from_config: bool = False):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        
        self.app = app
        self.load_from_config = load_from_config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ TabView
        self.tabview = ctk.CTkTabview(self)
        self.tabview.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        if not self.load_from_config:
            self.initial_tab_names = ["–°–µ—Ä–≤–µ—Ä 1", "–°–µ—Ä–≤–µ—Ä 2", "–°–µ—Ä–≤–µ—Ä 3"]
            for tab_name in self.initial_tab_names:
                self._create_tab(tab_name)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        self.update_treeview_style(ctk.get_appearance_mode())
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.after(200, self._adjust_all_tabs_columns)
    
    def _create_tab(self, tab_name: str, config_data: Optional[Dict] = None) -> TabHomeFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏."""
        tab = self.tabview.add(tab_name)
        tab_frame = TabHomeFrame(
            tab, 
            tab_name, 
            self.app, 
            load_from_config=self.load_from_config,
            config_data=config_data
        )
        tab_frame.pack(fill="both", expand=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        tab_frame.after(100, tab_frame._adjust_columns_width)
        
        return tab_frame
    
    def add_new_tab(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏."""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        existing_tabs = list(self.tabview._tab_dict.keys())
        new_tab_number = 1
        
        while f"–°–µ—Ä–≤–µ—Ä {new_tab_number}" in existing_tabs:
            new_tab_number += 1
        
        new_tab_name = f"–°–µ—Ä–≤–µ—Ä {new_tab_number}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self._create_tab(new_tab_name)
        self.tabview.set(new_tab_name)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞: {new_tab_name}")
    
    def rename_tab(self, old_name: str, new_name: str):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –≤–∫–ª–∞–¥–∫–∏
        old_tab = self.tabview.tab(old_name)
        old_frame = old_tab.winfo_children()[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        config_data = {
            "tab_name": new_name,
            "server": old_frame.server_entry.get(),
            "domain": old_frame.combobox_domain.get(),
            "password_status": old_frame.password_status_entry.get(),
            "group_search": old_frame.group_search_entry.get(),
            "groups": [
                old_frame.group_tree.item(item, "values") 
                for item in old_frame.group_tree.get_children()
            ],
            "session_tree_columns": old_frame.get_treeview_column_widths(old_frame.tree),
            "group_tree_columns": old_frame.get_treeview_column_widths(old_frame.group_tree),
            "printer_tree_columns": old_frame.get_treeview_column_widths(old_frame.printer_manager.tree)
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        new_frame = self._create_tab(new_name, config_data)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
        for item in old_frame.tree.get_children():
            values = old_frame.tree.item(item, "values")
            new_frame.tree.insert("", "end", values=values)
        
        for item in old_frame.printer_manager.tree.get_children():
            values = old_frame.printer_manager.tree.item(item, "values")
            new_frame.printer_manager.tree.insert("", "end", values=values)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–∫–ª–∞–¥–∫—É
        self.tabview.delete(old_name)
        self.tabview.set(new_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.load_from_config:
            new_frame.refresh_sessions()
    
    def update_all_treeview_styles(self, appearance_mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü."""
        tab_names = list(self.tabview._tab_dict.keys())
        
        for tab_name in tab_names:
            try:
                tab_frame = self.tabview.tab(tab_name)
                if tab_frame.winfo_children():
                    frame = tab_frame.winfo_children()[0]
                    if isinstance(frame, TabHomeFrame):
                        frame.update_treeview_style(appearance_mode)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ {tab_name}: {e}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å–∞–º–æ–≥–æ TabView
        self.tabview.configure(
            segmented_button_fg_color=("#979DA2", "#565B5E") if appearance_mode == "Dark" else ("#979DA2", "#565B5E"),
            segmented_button_selected_color=("#3B8ED0", "#1F6AA5") if appearance_mode == "Dark" else ("#36719F", "#144870"),
            segmented_button_selected_hover_color=("#36719F", "#144870") if appearance_mode == "Dark" else ("#2D5F84", "#0F3A57")
        )
    
    def update_treeview_style(self, appearance_mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–∞–±–ª–∏—Ü."""
        self.update_all_treeview_styles(appearance_mode)
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫."""
        tab_names = list(self.tabview._tab_dict.keys())
        
        for tab_name in tab_names:
            try:
                tab_frame = self.tabview.tab(tab_name)
                if tab_frame.winfo_children():
                    frame = tab_frame.winfo_children()[0]
                    if hasattr(frame, 'cleanup'):
                        frame.cleanup()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–∫–ª–∞–¥–∫–∏ {tab_name}: {e}")
    
    def _adjust_all_tabs_columns(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫."""
        tab_names = list(self.tabview._tab_dict.keys())
        
        for tab_name in tab_names:
            try:
                tab_frame = self.tabview.tab(tab_name)
                if tab_frame.winfo_children():
                    frame = tab_frame.winfo_children()[0]
                    if hasattr(frame, '_adjust_columns_width'):
                        frame._adjust_columns_width()
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ {tab_name}: {e}")