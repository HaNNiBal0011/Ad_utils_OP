import customtkinter as ctk
from tkinter import ttk, messagebox, Menu
from ldap3 import Server, Connection, ALL, SUBTREE, NTLM
import os
import logging
from tkinter.ttk import Notebook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class ADManagerFrame(ctk.CTkFrame):
    def __init__(self, parent, app):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        self.app = app
        self.ldap_password = None  # –•—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª—å –¥–ª—è AD

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–¥—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        self.left_frame = ctk.CTkFrame(self)
        self.left_frame.grid(row=0, column=0, padx=5, pady=5, sticky="ns")
        self.left_frame.grid_rowconfigure(0, weight=1)
        self.left_frame.grid_columnconfigure(0, weight=1)

        self.treeview_left = ttk.Treeview(self.left_frame, show="tree")
        self.treeview_left.grid(row=0, column=0, sticky="nsew")
        self.treeview_left.bind("<<TreeviewSelect>>", self.on_tree_select)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
        self.right_frame = ctk.CTkFrame(self)
        self.right_frame.grid(row=0, column=1, padx=5, pady=5, sticky="nsew")
        self.right_frame.grid_rowconfigure(2, weight=1)
        self.right_frame.grid_columnconfigure(0, weight=1)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–≤–æ–π—Å—Ç–≤
        self.login_entry = ctk.CTkEntry(self.right_frame, width=200, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
        self.login_entry.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.properties_button = ctk.CTkButton(self.right_frame, text="–°–≤–æ–π—Å—Ç–≤–∞", command=self.show_user_properties)
        self.properties_button.grid(row=0, column=0, padx=(210, 5), pady=5, sticky="w")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        self.search_entry = ctk.CTkEntry(self.right_frame, width=200, placeholder_text="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–µ")
        self.search_entry.grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.search_button = ctk.CTkButton(self.right_frame, text="üîç", width=30, command=self.search_ad_objects)
        self.search_button.grid(row=1, column=0, padx=(210, 5), pady=5, sticky="w")
        self.refresh_button = ctk.CTkButton(self.right_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_ad_objects)
        self.refresh_button.grid(row=1, column=0, padx=(250, 5), pady=5, sticky="w")

        # Treeview –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
        self.ad_tree = ttk.Treeview(self.right_frame, columns=("Name", "Type", "DN"), show="headings", height=15)
        self.ad_tree.grid(row=2, column=0, padx=5, pady=5, sticky="nsew")
        self.setup_treeview()

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = Menu(self, tearoff=0)
        self.context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_selected_object)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_selected_object)
        self.ad_tree.bind("<Button-3>", self.show_context_menu)
        self.ad_tree.bind("<Double-1>", self.edit_selected_object)

        self.update_treeview_style(ctk.get_appearance_mode())
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º load_ad_structure –∑–¥–µ—Å—å, –ø–µ—Ä–µ–Ω–µ—Å—ë–º –≤ refresh_ad_objects

    def setup_treeview(self):
        self.ad_tree.heading("Name", text="–ò–º—è")
        self.ad_tree.heading("Type", text="–¢–∏–ø")
        self.ad_tree.heading("DN", text="DN")
        self.ad_tree.column("Name", width=200, stretch=True)
        self.ad_tree.column("Type", width=100, stretch=True)
        self.ad_tree.column("DN", width=300, stretch=True)

    def update_treeview_style(self, appearance_mode):
        style = ttk.Style()
        style.theme_use("clam")
        if appearance_mode == "Dark":
            style.configure("Treeview", background="#2e2e2e", foreground="white", fieldbackground="#2e2e2e")
            style.configure("Treeview.Heading", background="#3c3c3c", foreground="white")
            style.map("Treeview", background=[('selected', '#5f5f5f')])
        else:
            style.configure("Treeview", background="white", foreground="black", fieldbackground="white")
            style.configure("Treeview.Heading", background="lightgray", foreground="black")
            style.map("Treeview", background=[('selected', '#cfcfcf')])
        self.ad_tree.configure(style="Treeview")
        self.treeview_left.configure(style="Treeview")

    def get_ldap_connection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å AD, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞ Frame 2."""
        domain = "corp.local"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if hasattr(self.app, 'home_frame') and hasattr(self.app.home_frame, 'combobox_domain'):
            domain = self.app.home_frame.combobox_domain.get()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è AD
        if not self.ldap_password:
            self.request_ldap_password()  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è AD
            return None

        current_username = os.getlogin()
        ldap_server = f"ldap://{domain}"
        server = Server(ldap_server, get_info=ALL)
        try:
            conn = Connection(
                server,
                user=f"{domain}\\{current_username}",
                password=self.ldap_password,
                authentication=NTLM,
                auto_bind=True
            )
            return conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LDAP: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AD: {e}")
            self.ldap_password = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return None

    def request_ldap_password(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è AD."""
        password_window = ctk.CTkToplevel(self)
        password_window.title("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è AD")
        password_window.geometry("300x150")
        password_window.transient(self)
        password_window.grab_set()

        ctk.CTkLabel(password_window, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ AD:").pack(pady=10)
        password_entry = ctk.CTkEntry(password_window, show="*", width=200)
        password_entry.pack(pady=5)

        def save_password():
            self.ldap_password = password_entry.get().strip()
            password_window.destroy()
            self.refresh_ad_objects()  # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è

        ctk.CTkButton(password_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_password).pack(pady=10)
        password_entry.bind("<Return>", lambda event: save_password())

    def load_ad_structure(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É AD –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å."""
        self.treeview_left.delete(*self.treeview_left.get_children())
        conn = self.get_ldap_connection()
        if not conn:
            return

        domain = conn.user.split('\\')[0]
        base_dn = ','.join([f"DC={part}" for part in domain.split('.')])
        root_id = self.treeview_left.insert("", "end", text=domain, open=True, tags=("domain",))

        try:
            conn.search(base_dn, '(objectClass=organizationalUnit)', SUBTREE, attributes=['distinguishedName', 'name'])
            for entry in conn.entries:
                ou_dn = entry.distinguishedName.value
                ou_name = entry.name.value
                parent_dn = ','.join(ou_dn.split(',')[1:]) if ou_dn.count(',') > 1 else base_dn
                parent_id = self.find_or_create_parent(self.treeview_left, parent_dn, domain)
                self.treeview_left.insert(parent_id, "end", text=ou_name, tags=("ou",))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É AD: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AD: {e}")
        finally:
            conn.unbind()

    def find_or_create_parent(self, tree, dn, domain):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª –¥–ª—è OU."""
        if dn == ','.join([f"DC={part}" for part in domain.split('.')]):
            return ""
        parts = dn.split(',')
        for i in range(len(parts) - 1, -1, -1):
            parent_dn = ','.join(parts[i:])
            if parent_dn == ','.join([f"DC={part}" for part in domain.split('.')]):
                return ""
            for child in tree.get_children():
                if tree.item(child, "text") == parent_dn.split('=')[1].split(',')[0]:
                    return child
        return ""

    def on_tree_select(self, event):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∑–ª–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
        selected_item = self.treeview_left.selection()
        if not selected_item:
            return
        dn = self.treeview_left.item(selected_item[0])["text"]
        self.refresh_ad_objects(dn)

    def refresh_ad_objects(self, base_dn=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É AD."""
        self.load_ad_structure()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        self.ad_tree.delete(*self.ad_tree.get_children())
        conn = self.get_ldap_connection()
        if not conn:
            return

        domain = conn.user.split('\\')[0]
        base_dn = base_dn or ','.join([f"DC={part}" for part in domain.split('.')])
        try:
            conn.search(base_dn, '(|(objectClass=user)(objectClass=group))',
                       SUBTREE, attributes=['cn', 'objectClass', 'distinguishedName'])
            for entry in conn.entries:
                name = entry.cn.value
                obj_type = "User" if "user" in entry.objectClass else "Group"
                dn = entry.distinguishedName.value
                self.ad_tree.insert("", "end", values=(name, obj_type, dn))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã AD: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ AD: {e}")
        finally:
            conn.unbind()

    def search_ad_objects(self):
        search_text = self.search_entry.get().strip().lower()
        if not search_text:
            self.refresh_ad_objects()
            return

        self.ad_tree.delete(*self.ad_tree.get_children())
        conn = self.get_ldap_connection()
        if not conn:
            return

        domain = conn.user.split('\\')[0]
        base_dn = ','.join([f"DC={part}" for part in domain.split('.')])
        try:
            conn.search(base_dn, f'(|(cn=*{search_text}*)(objectClass=user)(objectClass=group))',
                       SUBTREE, attributes=['cn', 'objectClass', 'distinguishedName'])
            for entry in conn.entries:
                name = entry.cn.value
                obj_type = "User" if "user" in entry.objectClass else "Group"
                dn = entry.distinguishedName.value
                self.ad_tree.insert("", "end", values=(name, obj_type, dn))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ AD: {e}")
        finally:
            conn.unbind()

    def show_context_menu(self, event):
        self.context_menu.post(event.x_root, event.y_root)

    def edit_selected_object(self, event=None):
        selected_item = self.ad_tree.selection()
        if not selected_item:
            return
        values = self.ad_tree.item(selected_item, "values")
        name, obj_type, dn = values

        edit_window = ctk.CTkToplevel(self)
        edit_window.title(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {obj_type}: {name}")
        edit_window.geometry("300x150")

        ctk.CTkLabel(edit_window, text="–ò–º—è:").pack(pady=5)
        name_entry = ctk.CTkEntry(edit_window, width=200)
        name_entry.insert(0, name)
        name_entry.pack(pady=5)

        def save_changes():
            new_name = name_entry.get().strip()
            if new_name and new_name != name:
                conn = self.get_ldap_connection()
                if conn:
                    try:
                        conn.modify(dn, {'cn': [(ldap3.MODIFY_REPLACE, [new_name])]})
                        if conn.result['result'] == 0:
                            self.refresh_ad_objects()
                            messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
                        else:
                            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç")
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                    finally:
                        conn.unbind()
            edit_window.destroy()

        ctk.CTkButton(edit_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes).pack(pady=10)

    def delete_selected_object(self):
        selected_item = self.ad_tree.selection()
        if not selected_item:
            return
        values = self.ad_tree.item(selected_item, "values")
        name, obj_type, dn = values

        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {obj_type}: {name}?")
        if confirm:
            conn = self.get_ldap_connection()
            if conn:
                try:
                    conn.delete(dn)
                    if conn.result['result'] == 0:
                        self.refresh_ad_objects()
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                finally:
                    conn.unbind()

    def show_user_properties(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –ª–æ–≥–∏–Ω—É."""
        login = self.login_entry.get().strip()
        if not login:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        conn = self.get_ldap_connection()
        if not conn:
            return

        domain = conn.user.split('\\')[0]
        base_dn = ','.join([f"DC={part}" for part in domain.split('.')])
        try:
            conn.search(base_dn, f'(&(objectClass=user)(sAMAccountName={login}))',
                       SUBTREE, attributes=['cn', 'displayName', 'sAMAccountName', 'mail', 'telephoneNumber',
                                          'distinguishedName', 'userPrincipalName', 'pwdLastSet', 'memberOf'])
            if not conn.entries:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            entry = conn.entries[0]
            self.open_properties_window(entry)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.unbind()

    def open_properties_window(self, entry):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        properties_window = ctk.CTkToplevel(self)
        properties_window.title(f"–°–≤–æ–π—Å—Ç–≤–∞: {entry.cn.value}")
        properties_window.geometry("500x600")
        properties_window.transient(self)
        properties_window.grab_set()

        # –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏
        notebook = Notebook(properties_window)
        notebook.pack(fill="both", expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ "–û–±—â–∞—è"
        general_frame = ctk.CTkFrame(notebook)
        notebook.add(general_frame, text="–û–±—â–∞—è")
        ctk.CTkLabel(general_frame, text="–ò–º—è:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(general_frame, text=entry.cn.value or "").grid(row=0, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(general_frame, text="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(general_frame, text=entry.displayName.value if 'displayName' in entry else "").grid(row=1, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(general_frame, text="–õ–æ–≥–∏–Ω:").grid(row=2, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(general_frame, text=entry.sAMAccountName.value or "").grid(row=2, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(general_frame, text="E-mail:").grid(row=3, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(general_frame, text=entry.mail.value if 'mail' in entry else "").grid(row=3, column=1, padx=5, pady=5, sticky="w")

        # –í–∫–ª–∞–¥–∫–∞ "–ê–¥—Ä–µ—Å"
        address_frame = ctk.CTkFrame(notebook)
        notebook.add(address_frame, text="–ê–¥—Ä–µ—Å")
        ctk.CTkLabel(address_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(address_frame, text=entry.telephoneNumber.value if 'telephoneNumber' in entry else "").grid(row=0, column=1, padx=5, pady=5, sticky="w")

        # –í–∫–ª–∞–¥–∫–∞ "–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å"
        account_frame = ctk.CTkFrame(notebook)
        notebook.add(account_frame, text="–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å")
        ctk.CTkLabel(account_frame, text="DN:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(account_frame, text=entry.distinguishedName.value or "").grid(row=0, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(account_frame, text="UPN:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
        ctk.CTkLabel(account_frame, text=entry.userPrincipalName.value if 'userPrincipalName' in entry else "").grid(row=1, column=1, padx=5, pady=5, sticky="w")

        # –í–∫–ª–∞–¥–∫–∞ "–ì—Ä—É–ø–ø—ã"
        groups_frame = ctk.CTkFrame(notebook)
        notebook.add(groups_frame, text="–ì—Ä—É–ø–ø—ã")
        groups_tree = ttk.Treeview(groups_frame, columns=("Group"), show="headings", height=15)
        groups_tree.heading("Group", text="–ì—Ä—É–ø–ø–∞")
        groups_tree.column("Group", width=300, stretch=True)
        groups_tree.pack(fill="both", expand=True, padx=5, pady=5)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø
        member_of = entry.memberOf.value if 'memberOf' in entry else []
        if isinstance(member_of, str):
            member_of = [member_of]
        for group_dn in member_of:
            group_name = group_dn.split(',')[0].replace('CN=', '').strip()
            groups_tree.insert("", "end", values=(group_name,))

        # –ö–Ω–æ–ø–∫–∞ OK
        ctk.CTkButton(properties_window, text="OK", command=properties_window.destroy).pack(pady=10)