# gui/vnc_viewer_frame.py
import customtkinter as ctk
from tkinter import Canvas, messagebox
import socket
import threading
import struct
import logging
from typing import Optional, Tuple, Dict, Any
from PIL import Image, ImageTk
import queue
import time
import select
import random
try:
    from Crypto.Cipher import DES
except ImportError:
    # Fallback –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    DES = None
import hashlib

logger = logging.getLogger(__name__)

class VNCViewerFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –¥–ª—è VNC –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    # RFB Protocol constants
    RFB_VERSION_3_3 = b"RFB 003.003\n"
    RFB_VERSION_3_7 = b"RFB 003.007\n"
    RFB_VERSION_3_8 = b"RFB 003.008\n"
    
    # Security types
    SECURITY_NONE = 1
    SECURITY_VNC = 2
    SECURITY_TIGHT = 16
    SECURITY_ULTRA = 17
    SECURITY_TLS = 18
    SECURITY_VENCRYPT = 19
    SECURITY_MS_LOGON_II = 113
    SECURITY_ULTRA_MS_LOGON_II = 117
    
    # Client message types
    SET_PIXEL_FORMAT = 0
    SET_ENCODINGS = 2
    FRAMEBUFFER_UPDATE_REQUEST = 3
    KEY_EVENT = 4
    POINTER_EVENT = 5
    CLIENT_CUT_TEXT = 6
    
    # Server message types
    FRAMEBUFFER_UPDATE = 0
    SET_COLOR_MAP_ENTRIES = 1
    BELL = 2
    SERVER_CUT_TEXT = 3
    
    # Encoding types
    ENCODING_RAW = 0
    ENCODING_COPYRECT = 1
    ENCODING_RRE = 2
    ENCODING_HEXTILE = 5
    ENCODING_ZLIB = 6
    ENCODING_TIGHT = 7
    ENCODING_ZLIBHEX = 8
    
    def __init__(self, parent, app):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        
        self.app = app
        self.socket = None
        self.connected = False
        self.screen_width = 0
        self.screen_height = 0
        self.pixel_format = None
        self.framebuffer = None
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.event_queue = queue.Queue()
        self.update_queue = queue.Queue()
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.receiving_thread = None
        self.processing_thread = None
        self._stop_threads = threading.Event()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self._setup_ui()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self._start_event_processor()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._create_connection_panel()
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self._create_viewer_area()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        self._create_status_panel()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_panel()
    
    def _create_connection_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        connection_frame = ctk.CTkFrame(self)
        connection_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        ctk.CTkLabel(connection_frame, text="VNC –°–µ—Ä–≤–µ—Ä:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        self.server_entry = ctk.CTkEntry(connection_frame, width=200, placeholder_text="192.168.1.100:5900")
        self.server_entry.grid(row=0, column=1, padx=5, pady=5)
        self.server_entry.insert(0, "192.168.1.100:5900")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        ctk.CTkLabel(connection_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=0, column=2, padx=5, pady=5, sticky="w")
        
        self.password_entry = ctk.CTkEntry(connection_frame, width=150, show="*", placeholder_text="VNC –ø–∞—Ä–æ–ª—å")
        self.password_entry.grid(row=0, column=3, padx=5, pady=5)
        self.password_entry.bind("<Return>", lambda e: self.connect_to_vnc())
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.connect_button = ctk.CTkButton(
            connection_frame, 
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
            command=self.connect_to_vnc,
            width=120
        )
        self.connect_button.grid(row=0, column=4, padx=5, pady=5)
        
        self.disconnect_button = ctk.CTkButton(
            connection_frame, 
            text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", 
            command=self.disconnect_from_vnc,
            width=120,
            state="disabled"
        )
        self.disconnect_button.grid(row=0, column=5, padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_frame = ctk.CTkFrame(connection_frame, fg_color="transparent")
        quality_frame.grid(row=1, column=0, columnspan=6, pady=5)
        
        ctk.CTkLabel(quality_frame, text="–ö–∞—á–µ—Å—Ç–≤–æ:").pack(side="left", padx=5)
        
        self.quality_var = ctk.StringVar(value="medium")
        quality_menu = ctk.CTkSegmentedButton(
            quality_frame,
            values=["–ù–∏–∑–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–í—ã—Å–æ–∫–æ–µ"],
            variable=self.quality_var
        )
        quality_menu.pack(side="left", padx=5)
        quality_menu.set("–°—Ä–µ–¥–Ω–µ–µ")
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è view-only —Ä–µ–∂–∏–º–∞
        self.view_only_var = ctk.BooleanVar(value=False)
        ctk.CTkCheckBox(
            quality_frame,
            text="–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä",
            variable=self.view_only_var
        ).pack(side="left", padx=20)
    
    def _create_viewer_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        # –§—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è canvas
        viewer_frame = ctk.CTkFrame(self)
        viewer_frame.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")
        viewer_frame.grid_rowconfigure(0, weight=1)
        viewer_frame.grid_columnconfigure(0, weight=1)
        
        # Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        self.canvas = Canvas(
            viewer_frame,
            bg="black",
            highlightthickness=0
        )
        self.canvas.grid(row=0, column=0, sticky="nsew")
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ctk.CTkScrollbar(viewer_frame, orientation="vertical", command=self.canvas.yview)
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        
        h_scrollbar = ctk.CTkScrollbar(viewer_frame, orientation="horizontal", command=self.canvas.xview)
        h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        self.canvas.configure(
            yscrollcommand=v_scrollbar.set,
            xscrollcommand=h_scrollbar.set
        )
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.canvas.bind("<Button-1>", self._on_mouse_click)
        self.canvas.bind("<ButtonRelease-1>", self._on_mouse_release)
        self.canvas.bind("<B1-Motion>", self._on_mouse_motion)
        self.canvas.bind("<Button-3>", self._on_right_click)
        self.canvas.bind("<ButtonRelease-3>", self._on_right_release)
        self.canvas.bind("<Motion>", self._on_mouse_move)
        self.canvas.bind("<MouseWheel>", self._on_mouse_wheel)
        
        # –§–æ–∫—É—Å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.canvas.bind("<Enter>", lambda e: self.canvas.focus_set())
        self.canvas.bind("<KeyPress>", self._on_key_press)
        self.canvas.bind("<KeyRelease>", self._on_key_release)
    
    def _create_status_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞."""
        status_frame = ctk.CTkFrame(self)
        status_frame.grid(row=2, column=0, padx=10, pady=5, sticky="ew")
        
        self.status_label = ctk.CTkLabel(
            status_frame, 
            text="–û—Ç–∫–ª—é—á–µ–Ω–æ",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(side="left", padx=10)
        
        self.resolution_label = ctk.CTkLabel(
            status_frame,
            text="",
            font=ctk.CTkFont(size=12)
        )
        self.resolution_label.pack(side="left", padx=20)
        
        self.fps_label = ctk.CTkLabel(
            status_frame,
            text="",
            font=ctk.CTkFont(size=12)
        )
        self.fps_label.pack(side="left", padx=20)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_indicator = ctk.CTkLabel(
            status_frame,
            text="‚ö´",
            font=ctk.CTkFont(size=16)
        )
        self.activity_indicator.pack(side="right", padx=10)
    
    def _create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        control_frame = ctk.CTkFrame(self)
        control_frame.grid(row=3, column=0, padx=10, pady=5, sticky="ew")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        ctk.CTkLabel(control_frame, text="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏:").pack(side="left", padx=5)
        
        ctk.CTkButton(
            control_frame,
            text="Ctrl+Alt+Del",
            command=self._send_ctrl_alt_del,
            width=100
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            control_frame,
            text="Alt+Tab",
            command=self._send_alt_tab,
            width=80
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            control_frame,
            text="Esc",
            command=self._send_escape,
            width=50
        ).pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        ctk.CTkButton(
            control_frame,
            text="–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω",
            command=self._toggle_fullscreen,
            width=100
        ).pack(side="right", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        ctk.CTkButton(
            control_frame,
            text="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç",
            command=self._take_screenshot,
            width=100
        ).pack(side="right", padx=5)
    
    def connect_to_vnc(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VNC —Å–µ—Ä–≤–µ—Ä—É."""
        server_address = self.server_entry.get().strip()
        if not server_address:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å VNC —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞
        if ':' in server_address:
            host, port = server_address.split(':')
            port = int(port)
        else:
            host = server_address
            port = 5900
        
        password = self.password_entry.get()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=self._connect_thread,
            args=(host, port, password),
            daemon=True
        ).start()
    
    def _connect_thread(self, host: str, port: int, password: str):
        """–ü–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VNC —Å–µ—Ä–≤–µ—Ä—É."""
        try:
            self._update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
            self.socket.connect((host, port))
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
            self.socket.settimeout(5)
            
            # Handshake
            if not self._handshake():
                raise Exception("–û—à–∏–±–∫–∞ handshake")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not self._authenticate(password):
                raise Exception("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self._initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            self.connected = True
            self._update_status(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {host}:{port}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.after(0, self._on_connected)
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._start_receiver_thread()
            
            # –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
            self._request_framebuffer_update(incremental=False)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self._update_status(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.after(0, self._on_connection_failed, str(e))
    
    def _handshake(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VNC handshake."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–µ—Ä–∞
            server_version = self._recv_exact(12)
            logger.debug(f"Server version: {server_version}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é
            self.socket.send(self.RFB_VERSION_3_8)
            
            return True
        except Exception as e:
            logger.error(f"Handshake error: {e}")
            return False
    
    def _authenticate(self, password: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ VNC —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UltraVNC."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            num_security_types = struct.unpack("!B", self._recv_exact(1))[0]
            
            if num_security_types == 0:
                # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                reason_length = struct.unpack("!I", self._recv_exact(4))[0]
                reason = self._recv_exact(reason_length).decode()
                logger.error(f"Server error: {reason}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤
            security_types = struct.unpack(f"!{num_security_types}B", 
                                         self._recv_exact(num_security_types))
            logger.debug(f"Security types: {security_types}")
            
            # –î–ª—è UltraVNC —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ç–∏–ø 17
            if 17 in security_types:
                logger.info("Using UltraVNC security (type 17)")
                self.socket.send(struct.pack("!B", 17))
                
                # UltraVNC MS Logon - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                # –ß–∏—Ç–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–º–æ–¥—É–ª—å –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞)
                gen_size = struct.unpack("!H", self._recv_exact(2))[0]
                generator = self._recv_exact(gen_size)
                
                mod_size = struct.unpack("!H", self._recv_exact(2))[0]
                modulus = self._recv_exact(mod_size)
                
                logger.debug(f"UltraVNC DH params: gen={gen_size} bytes, mod={mod_size} bytes")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                import random
                pub_key = bytes([random.randint(0, 255) for _ in range(mod_size)])
                self.socket.send(struct.pack("!H", mod_size) + pub_key)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞
                server_pub_size = struct.unpack("!H", self._recv_exact(2))[0]
                server_pub_key = self._recv_exact(server_pub_size)
                
                # –ü–æ–ª—É—á–∞–µ–º challenge
                challenge = self._recv_exact(16)
                
                # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–ª–∏ –∫–∞–∫ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å DH —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
                self.socket.send(b'\x00' * 256)  # credentials
                
            elif self.SECURITY_VNC in security_types:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è VNC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                logger.info("Using standard VNC security (type 2)")
                self.socket.send(struct.pack("!B", self.SECURITY_VNC))
                
                # –ü–æ–ª—É—á–∞–µ–º challenge
                challenge = self._recv_exact(16)
                
                # –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                response = self._encrypt_password(password or "", challenge)
                self.socket.send(response)
                
            elif self.SECURITY_NONE in security_types:
                # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                logger.info("Using no security (type 1)")
                self.socket.send(struct.pack("!B", self.SECURITY_NONE))
                
            else:
                logger.error(f"No supported security types in {security_types}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = self._recv_exact(4)
            result = struct.unpack("!I", result_data)[0]
            
            if result == 0:
                logger.info("Authentication successful")
                return True
            else:
                logger.error(f"Authentication failed with result: {result}")
                return False
            
        except Exception as e:
            logger.error(f"Authentication error: {e}")
            return False
    
    def _encrypt_password(self, password: str, challenge: bytes) -> bytes:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è VNC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        # –ï—Å–ª–∏ DES –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if DES:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è (8 –±–∞–π—Ç, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω—É–ª—è–º–∏)
            password = password[:8].ljust(8, '\0').encode('latin-1')
            
            # –†–µ–≤–µ—Ä—Å –±–∏—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º –±–∞–π—Ç–µ (VNC –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å)
            password = bytes(self._reverse_bits(b) for b in password)
            
            # DES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            cipher = DES.new(password, DES.MODE_ECB)
            return cipher.encrypt(challenge)
        else:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ DES
            # –î–ª—è –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º challenge XOR —Å –Ω—É–ª—è–º–∏
            if not password:
                # –ú–Ω–æ–≥–∏–µ VNC —Å–µ—Ä–≤–µ—Ä—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤—Å–µ –Ω—É–ª–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è
                return b'\x00' * 16
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
            key = password[:8].ljust(8, '\0').encode('latin-1')
            
            # –†–µ–≤–µ—Ä—Å –±–∏—Ç–æ–≤
            key = bytes(self._reverse_bits(b) for b in key)
            
            # –ü—Ä–æ—Å—Ç–æ–µ XOR –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–ù–ï –ë–ï–ó–û–ü–ê–°–ù–û!)
            result = bytearray(16)
            for i in range(16):
                result[i] = challenge[i] ^ key[i % 8]
            
            return bytes(result)
    
    def _reverse_bits(self, byte: int) -> int:
        """–†–µ–≤–µ—Ä—Å –±–∏—Ç–æ–≤ –≤ –±–∞–π—Ç–µ."""
        return int('{:08b}'.format(byte)[::-1], 2)
    
    def _initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VNC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ClientInit (shared flag)
            self.socket.send(struct.pack("!B", 1))  # 1 = shared
            
            # –ü–æ–ª—É—á–∞–µ–º ServerInit
            # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            size_data = self._recv_exact(4)
            self.screen_width, self.screen_height = struct.unpack("!HH", size_data)
            logger.info(f"Screen size: {self.screen_width}x{self.screen_height}")
            
            # Pixel format
            pixel_format_data = self._recv_exact(16)
            self.pixel_format = self._parse_pixel_format(pixel_format_data)
            
            # Desktop name
            name_length = struct.unpack("!I", self._recv_exact(4))[0]
            desktop_name = self._recv_exact(name_length).decode()
            logger.info(f"Desktop name: {desktop_name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è framebuffer
            self.framebuffer = Image.new('RGB', (self.screen_width, self.screen_height))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
            self._set_encodings()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pixel format (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # self._set_pixel_format()
            
            return True
            
        except Exception as e:
            logger.error(f"Initialization error: {e}")
            return False
    
    def _parse_pixel_format(self, data: bytes) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏–∫—Å–µ–ª–µ–π."""
        return {
            'bits_per_pixel': data[0],
            'depth': data[1],
            'big_endian': bool(data[2]),
            'true_color': bool(data[3]),
            'red_max': struct.unpack("!H", data[4:6])[0],
            'green_max': struct.unpack("!H", data[6:8])[0],
            'blue_max': struct.unpack("!H", data[8:10])[0],
            'red_shift': data[10],
            'green_shift': data[11],
            'blue_shift': data[12]
        }
    
    def _set_encodings(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫."""
        # –î–ª—è UltraVNC –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        encodings = [
            self.ENCODING_RAW,       # 0
            self.ENCODING_COPYRECT,  # 1
            # –ü—Å–µ–≤–¥–æ-–∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è UltraVNC
            -223,  # DesktopSize
            -224,  # LastRect
            -232,  # PointerPos
            -239,  # Cursor
            -240,  # XCursor
        ]
        
        message = struct.pack("!BBH", self.SET_ENCODINGS, 0, len(encodings))
        for encoding in encodings:
            message += struct.pack("!i", encoding)
        
        self.socket.send(message)
        logger.debug(f"Set encodings: {encodings}")
    
    def _request_framebuffer_update(self, incremental: bool = True):
        """–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è framebuffer."""
        if not self.connected or not self.socket:
            return
        
        try:
            message = struct.pack(
                "!BBHHHH",
                self.FRAMEBUFFER_UPDATE_REQUEST,  # 3
                1 if incremental else 0,
                0, 0,  # x, y
                self.screen_width, self.screen_height  # width, height
            )
            
            self.socket.send(message)
            
        except Exception as e:
            logger.error(f"Error requesting framebuffer update: {e}")
    
    def _start_receiver_thread(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self._stop_threads.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏–µ–º–∞
        self.receiving_thread = threading.Thread(
            target=self._receive_loop,
            daemon=True
        )
        self.receiving_thread.start()
        
        logger.info("Receiver thread started")
    
    def _receive_loop(self):
        """–¶–∏–∫–ª –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
        while self.connected and not self._stop_threads.is_set():
            try:
                # –ß–∏—Ç–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                msg_type_data = self.socket.recv(1)
                if not msg_type_data:
                    logger.warning("Connection closed by server")
                    break
                
                message_type = struct.unpack("!B", msg_type_data)[0]
                
                if message_type == self.FRAMEBUFFER_UPDATE:
                    self._handle_framebuffer_update()
                elif message_type == self.SET_COLOR_MAP_ENTRIES:
                    self._handle_colormap_entries()
                elif message_type == self.BELL:
                    self._handle_bell()
                elif message_type == self.SERVER_CUT_TEXT:
                    self._handle_server_cut_text()
                else:
                    logger.warning(f"Unknown message type: {message_type}")
                
            except socket.timeout:
                continue
            except struct.error as e:
                logger.error(f"Struct unpack error: {e}")
                break
            except socket.error as e:
                logger.error(f"Socket error: {e}")
                break
            except Exception as e:
                logger.error(f"Receive error: {e}")
                self.connected = False
                break
        
        self.connected = False
        self._update_status("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
        self.after(0, self.disconnect_from_vnc)
    
    def _recv_exact(self, size: int) -> bytes:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–π—Ç."""
        if size <= 0:
            return b''
        
        if size > 10000000:  # 10MB –ª–∏–º–∏—Ç
            raise ValueError(f"Requested size too large: {size}")
        
        data = b''
        remaining = size
        
        while remaining > 0:
            try:
                chunk = self.socket.recv(min(remaining, 4096))
                if not chunk:
                    raise ConnectionError(f"Connection closed (expected {size} bytes, got {len(data)})")
                data += chunk
                remaining -= len(chunk)
            except socket.timeout:
                if len(data) > 0:
                    logger.warning(f"Timeout while reading, got {len(data)}/{size} bytes")
                raise
        
        return data
    
    def _handle_framebuffer_update(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è framebuffer."""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º padding
            self._recv_exact(1)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
            num_rectangles = struct.unpack("!H", self._recv_exact(2))[0]
            
            for _ in range(num_rectangles):
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã
                rect_data = self._recv_exact(8)
                x, y, w, h = struct.unpack("!HHHH", rect_data)
                
                # –¢–∏–ø –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                encoding = struct.unpack("!i", self._recv_exact(4))[0]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                if encoding == self.ENCODING_RAW:
                    self._handle_raw_rectangle(x, y, w, h)
                elif encoding == self.ENCODING_COPYRECT:
                    self._handle_copyrect(x, y, w, h)
                elif encoding == self.ENCODING_RRE:
                    self._handle_rre_rectangle(x, y, w, h)
                elif encoding == self.ENCODING_HEXTILE:
                    self._handle_hextile_rectangle(x, y, w, h)
                else:
                    logger.warning(f"Unsupported encoding: {encoding}")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    bytes_per_pixel = self.pixel_format['bits_per_pixel'] // 8
                    self._recv_exact(w * h * bytes_per_pixel)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
            self.update_queue.put(('update_display', None))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._request_framebuffer_update(incremental=True)
            
        except Exception as e:
            logger.error(f"Framebuffer update error: {e}")
            raise
    
    def _handle_raw_rectangle(self, x: int, y: int, w: int, h: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RAW –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        bytes_per_pixel = self.pixel_format['bits_per_pixel'] // 8
        data_size = w * h * bytes_per_pixel
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞
        if data_size > 10000000:  # 10MB –ª–∏–º–∏—Ç
            logger.error(f"Rectangle too large: {w}x{h}, {data_size} bytes")
            raise ValueError(f"Rectangle too large: {data_size} bytes")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            pixel_data = self._recv_exact(data_size)
        except Exception as e:
            logger.error(f"Error reading raw rectangle data: {e}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        rect_image = Image.new('RGB', (w, h))
        pixels = []
        
        for i in range(0, len(pixel_data), bytes_per_pixel):
            if bytes_per_pixel == 4:  # 32-bit
                b, g, r, _ = pixel_data[i:i+4]
                pixels.append((r, g, b))
            elif bytes_per_pixel == 3:  # 24-bit
                b, g, r = pixel_data[i:i+3]
                pixels.append((r, g, b))
            elif bytes_per_pixel == 2:  # 16-bit
                pixel = struct.unpack("!H", pixel_data[i:i+2])[0]
                r = ((pixel >> self.pixel_format['red_shift']) & 
                     ((1 << self._bit_count(self.pixel_format['red_max'])) - 1))
                g = ((pixel >> self.pixel_format['green_shift']) & 
                     ((1 << self._bit_count(self.pixel_format['green_max'])) - 1))
                b = ((pixel >> self.pixel_format['blue_shift']) & 
                     ((1 << self._bit_count(self.pixel_format['blue_max'])) - 1))
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 8 –±–∏—Ç
                r = r * 255 // self.pixel_format['red_max']
                g = g * 255 // self.pixel_format['green_max']
                b = b * 255 // self.pixel_format['blue_max']
                pixels.append((r, g, b))
        
        rect_image.putdata(pixels)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π framebuffer
        self.framebuffer.paste(rect_image, (x, y))
    
    def _bit_count(self, n: int) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –±–∏—Ç–æ–≤ –≤ —á–∏—Å–ª–µ."""
        count = 0
        while n:
            count += 1
            n >>= 1
        return count
    
    def _handle_copyrect(self, x: int, y: int, w: int, h: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ COPYRECT."""
        src_data = self._recv_exact(4)
        src_x, src_y = struct.unpack("!HH", src_data)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect = self.framebuffer.crop((src_x, src_y, src_x + w, src_y + h))
        self.framebuffer.paste(rect, (x, y))
    
    def _handle_rre_rectangle(self, x: int, y: int, w: int, h: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RRE –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        num_subrects = struct.unpack("!I", self._recv_exact(4))[0]
        
        bytes_per_pixel = self.pixel_format['bits_per_pixel'] // 8
        
        # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
        bg_color = self._read_pixel(bytes_per_pixel)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω–æ–º
        rect_image = Image.new('RGB', (w, h), bg_color)
        
        # –ß–∏—Ç–∞–µ–º –ø–æ–¥–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        for _ in range(num_subrects):
            pixel_color = self._read_pixel(bytes_per_pixel)
            sub_data = self._recv_exact(8)
            sub_x, sub_y, sub_w, sub_h = struct.unpack("!HHHH", sub_data)
            
            # –†–∏—Å—É–µ–º –ø–æ–¥–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            for py in range(sub_y, sub_y + sub_h):
                for px in range(sub_x, sub_x + sub_w):
                    if 0 <= px < w and 0 <= py < h:
                        rect_image.putpixel((px, py), pixel_color)
        
        self.framebuffer.paste(rect_image, (x, y))
    
    def _handle_hextile_rectangle(self, x: int, y: int, w: int, h: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HEXTILE –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
        tile_size = 16
        
        for tile_y in range(0, h, tile_size):
            for tile_x in range(0, w, tile_size):
                # –†–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–ª–∞
                tw = min(tile_size, w - tile_x)
                th = min(tile_size, h - tile_y)
                
                # –ß–∏—Ç–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ–¥–∫–æ–¥–∏—Ä–æ–≤–∫–∏
                subencoding = struct.unpack("!B", self._recv_exact(1))[0]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–æ–≤
                if subencoding & 0x01:  # Raw
                    self._handle_raw_rectangle(x + tile_x, y + tile_y, tw, th)
                else:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∫–æ–¥–∏—Ä–æ–≤–æ–∫
                    # –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏
                    bytes_per_pixel = self.pixel_format['bits_per_pixel'] // 8
                    
                    if subencoding & 0x02:  # Background specified
                        bg_color = self._read_pixel(bytes_per_pixel)
                    else:
                        bg_color = (0, 0, 0)  # Default
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–π–ª —Ñ–æ–Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
                    tile_image = Image.new('RGB', (tw, th), bg_color)
                    self.framebuffer.paste(tile_image, (x + tile_x, y + tile_y))
    
    def _read_pixel(self, bytes_per_pixel: int) -> Tuple[int, int, int]:
        """–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è."""
        pixel_data = self._recv_exact(bytes_per_pixel)
        
        if bytes_per_pixel == 4:  # 32-bit
            b, g, r, _ = pixel_data
            return (r, g, b)
        elif bytes_per_pixel == 3:  # 24-bit
            b, g, r = pixel_data
            return (r, g, b)
        elif bytes_per_pixel == 2:  # 16-bit
            pixel = struct.unpack("!H", pixel_data)[0]
            r = ((pixel >> self.pixel_format['red_shift']) & 
                 ((1 << self._bit_count(self.pixel_format['red_max'])) - 1))
            g = ((pixel >> self.pixel_format['green_shift']) & 
                 ((1 << self._bit_count(self.pixel_format['green_max'])) - 1))
            b = ((pixel >> self.pixel_format['blue_shift']) & 
                 ((1 << self._bit_count(self.pixel_format['blue_max'])) - 1))
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 8 –±–∏—Ç
            r = r * 255 // self.pixel_format['red_max']
            g = g * 255 // self.pixel_format['green_max']
            b = b * 255 // self.pixel_format['blue_max']
            return (r, g, b)
        else:
            return (0, 0, 0)
    
    def _handle_colormap_entries(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã."""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º padding
        self._recv_exact(1)
        
        # First color, number of colors
        first_color = struct.unpack("!H", self._recv_exact(2))[0]
        num_colors = struct.unpack("!H", self._recv_exact(2))[0]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤ (–ø–æ 6 –±–∞–π—Ç –Ω–∞ —Ü–≤–µ—Ç)
        self._recv_exact(num_colors * 6)
        
        logger.debug(f"Colormap entries: first={first_color}, count={num_colors}")
    
    def _handle_unknown_message(self, msg_type: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        logger.warning(f"Unknown message type: {msg_type}")
        
        # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ UltraVNC
        if msg_type == 12:  # –í–æ–∑–º–æ–∂–Ω–æ, FileTransfer
            logger.debug("Possible FileTransfer message, skipping")
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            try:
                # FileTransfer –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 4 –±–∞–π—Ç–∞—Ö
                length = struct.unpack("!I", self._recv_exact(4))[0]
                if length < 1000000:  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
                    self._recv_exact(length)
            except:
                pass
        elif msg_type == 255:  # –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            logger.debug("Possible protocol extension, skipping")
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç
            try:
                self.socket.recv(100, socket.MSG_DONTWAIT)
            except:
                pass
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            logger.debug(f"Trying to recover from unknown message type {msg_type}")
    
    def _handle_bell(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
        logger.info("Bell received")
        # –ú–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
        self.after(0, self.app.bell)
    
    def _handle_server_cut_text(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º padding
        self._recv_exact(3)
        
        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        text_length = struct.unpack("!I", self._recv_exact(4))[0]
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
        text = self._recv_exact(text_length).decode('latin-1')
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        self.after(0, self._copy_to_clipboard, text)
    
    def _copy_to_clipboard(self, text: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        self.clipboard_clear()
        self.clipboard_append(text)
        self.update()
    
    def _start_event_processor(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π UI."""
        self._process_events()
    
    def _process_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            while True:
                event_type, data = self.update_queue.get_nowait()
                
                if event_type == 'update_display':
                    self._update_canvas()
                elif event_type == 'update_status':
                    self.status_label.configure(text=data)
                elif event_type == 'update_resolution':
                    self.resolution_label.configure(text=data)
                    
        except queue.Empty:
            pass
        
        self.after(16, self._process_events)  # ~60 FPS
    
    def _update_canvas(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas."""
        if not self.framebuffer:
            return
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(self.framebuffer)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º canvas
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor="nw", image=photo)
            self.canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas
            self.canvas.configure(scrollregion=(0, 0, self.screen_width, self.screen_height))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.activity_indicator.configure(text="üü¢")
            self.after(100, lambda: self.activity_indicator.configure(text="‚ö´"))
            
        except Exception as e:
            logger.error(f"Canvas update error: {e}")
    
    def _update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞."""
        self.update_queue.put(('update_status', status))
    
    def _on_connected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        self.connect_button.configure(state="disabled")
        self.disconnect_button.configure(state="normal")
        self.server_entry.configure(state="disabled")
        self.password_entry.configure(state="disabled")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        resolution_text = f"{self.screen_width}x{self.screen_height}"
        self.update_queue.put(('update_resolution', resolution_text))
        
        # –§–æ–∫—É—Å –Ω–∞ canvas
        self.canvas.focus_set()
    
    def _on_connection_failed(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n{error}")
    
    def disconnect_from_vnc(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VNC —Å–µ—Ä–≤–µ—Ä–∞."""
        self.connected = False
        self._stop_threads.set()
        
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.receiving_thread and self.receiving_thread.is_alive():
            self.receiving_thread.join(timeout=1)
        
        # –û—á–∏—Å—Ç–∫–∞
        self.canvas.delete("all")
        self.framebuffer = None
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.connect_button.configure(state="normal")
        self.disconnect_button.configure(state="disabled")
        self.server_entry.configure(state="normal")
        self.password_entry.configure(state="normal")
        
        self._update_status("–û—Ç–∫–ª—é—á–µ–Ω–æ")
        self.resolution_label.configure(text="")
        self.fps_label.configure(text="")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
    def _on_mouse_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏."""
        if self.connected and not self.view_only_var.get():
            self._send_pointer_event(event.x, event.y, button_mask=1)
    
    def _on_mouse_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏."""
        if self.connected and not self.view_only_var.get():
            self._send_pointer_event(event.x, event.y, button_mask=0)
    
    def _on_mouse_motion(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ —Å –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π."""
        if self.connected and not self.view_only_var.get():
            self._send_pointer_event(event.x, event.y, button_mask=1)
    
    def _on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏."""
        if self.connected and not self.view_only_var.get():
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            current_time = time.time()
            if hasattr(self, '_last_mouse_move_time'):
                if current_time - self._last_mouse_move_time < 0.05:  # 20 FPS
                    return
            self._last_mouse_move_time = current_time
            
            self._send_pointer_event(event.x, event.y, button_mask=0)
    
    def _on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞."""
        if self.connected and not self.view_only_var.get():
            self._send_pointer_event(event.x, event.y, button_mask=4)
    
    def _on_right_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏."""
        if self.connected and not self.view_only_var.get():
            self._send_pointer_event(event.x, event.y, button_mask=0)
    
    def _on_mouse_wheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏."""
        if self.connected and not self.view_only_var.get():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if event.delta > 0:
                button_mask = 8  # Wheel up
            else:
                button_mask = 16  # Wheel down
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ
            self._send_pointer_event(event.x, event.y, button_mask=button_mask)
            self.after(10, lambda: self._send_pointer_event(event.x, event.y, button_mask=0))
    
    def _send_pointer_event(self, x: int, y: int, button_mask: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è."""
        if not self.connected:
            return
        
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = max(0, min(x, self.screen_width - 1))
            y = max(0, min(y, self.screen_height - 1))
            
            message = struct.pack(
                "!BBHH",
                self.POINTER_EVENT,
                button_mask,
                x, y
            )
            self.socket.send(message)
        except Exception as e:
            logger.error(f"Error sending pointer event: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def _on_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏."""
        if self.connected and not self.view_only_var.get():
            keysym = self._get_keysym(event)
            if keysym:
                self._send_key_event(keysym, down=True)
    
    def _on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏."""
        if self.connected and not self.view_only_var.get():
            keysym = self._get_keysym(event)
            if keysym:
                self._send_key_event(keysym, down=False)
    
    def _get_keysym(self, event) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ keysym –¥–ª—è –∫–ª–∞–≤–∏—à–∏."""
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        special_keys = {
            'Return': 0xff0d,
            'Escape': 0xff1b,
            'BackSpace': 0xff08,
            'Tab': 0xff09,
            'space': 0x0020,
            'Delete': 0xffff,
            'Home': 0xff50,
            'End': 0xff57,
            'Prior': 0xff55,  # Page Up
            'Next': 0xff56,   # Page Down
            'Left': 0xff51,
            'Up': 0xff52,
            'Right': 0xff53,
            'Down': 0xff54,
            'F1': 0xffbe,
            'F2': 0xffbf,
            'F3': 0xffc0,
            'F4': 0xffc1,
            'F5': 0xffc2,
            'F6': 0xffc3,
            'F7': 0xffc4,
            'F8': 0xffc5,
            'F9': 0xffc6,
            'F10': 0xffc7,
            'F11': 0xffc8,
            'F12': 0xffc9,
            'Shift_L': 0xffe1,
            'Shift_R': 0xffe2,
            'Control_L': 0xffe3,
            'Control_R': 0xffe4,
            'Alt_L': 0xffe9,
            'Alt_R': 0xffea,
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if event.keysym in special_keys:
            return special_keys[event.keysym]
        
        # –û–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if len(event.char) == 1 and ord(event.char) < 256:
            return ord(event.char)
        
        return None
    
    def _send_key_event(self, keysym: int, down: bool):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        if not self.connected:
            return
        
        try:
            message = struct.pack(
                "!BxBBxxxI",
                self.KEY_EVENT,
                1 if down else 0,
                0,  # padding
                keysym
            )
            self.socket.send(message)
        except Exception as e:
            logger.error(f"Error sending key event: {e}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    def _send_ctrl_alt_del(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Ctrl+Alt+Del."""
        if not self.connected or self.view_only_var.get():
            return
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: Ctrl down, Alt down, Del down, Del up, Alt up, Ctrl up
        self._send_key_event(0xffe3, True)   # Ctrl down
        self._send_key_event(0xffe9, True)   # Alt down
        self._send_key_event(0xffff, True)   # Del down
        self.after(50, lambda: self._send_key_event(0xffff, False))  # Del up
        self.after(100, lambda: self._send_key_event(0xffe9, False))  # Alt up
        self.after(150, lambda: self._send_key_event(0xffe3, False))  # Ctrl up
    
    def _send_alt_tab(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Alt+Tab."""
        if not self.connected or self.view_only_var.get():
            return
        
        self._send_key_event(0xffe9, True)   # Alt down
        self._send_key_event(0xff09, True)   # Tab down
        self.after(50, lambda: self._send_key_event(0xff09, False))  # Tab up
        self.after(100, lambda: self._send_key_event(0xffe9, False))  # Alt up
    
    def _send_escape(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Escape."""
        if not self.connected or self.view_only_var.get():
            return
        
        self._send_key_event(0xff1b, True)   # Esc down
        self.after(50, lambda: self._send_key_event(0xff1b, False))  # Esc up
    
    def _toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _take_screenshot(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
        if not self.connected or not self.framebuffer:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        
        from tkinter import filedialog
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".png",
            filetypes=[("PNG files", "*.png"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"
        )
        
        if filename:
            try:
                self.framebuffer.save(filename)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:\n{e}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        self.disconnect_from_vnc()