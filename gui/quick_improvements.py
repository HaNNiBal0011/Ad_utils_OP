# quick_improvements.py
"""
–ü–∞—Ç—á —Å –±—ã—Å—Ç—Ä—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è RDP Manager.
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
"""

import customtkinter as ctk
from tkinter import messagebox, filedialog
import subprocess
import datetime
import csv

def add_session_controls_to_tab(tab_frame):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏."""
    
    # –§—Ä–µ–π–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    extra_controls = ctk.CTkFrame(tab_frame, fg_color="transparent")
    extra_controls.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="w")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    disconnect_all_btn = ctk.CTkButton(
        extra_controls,
        text="‚ö†Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ",
        command=lambda: disconnect_all_sessions(tab_frame),
        width=120,
        fg_color="darkred",
        hover_color="red"
    )
    disconnect_all_btn.pack(side="left", padx=(0, 5))
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–µ—Å—Å–∏–π
    export_sessions_btn = ctk.CTkButton(
        extra_controls,
        text="üì§ –≠–∫—Å–ø–æ—Ä—Ç",
        command=lambda: export_sessions(tab_frame),
        width=100
    )
    export_sessions_btn.pack(side="left", padx=(0, 5))
    
    # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    tab_frame.auto_refresh_var = ctk.BooleanVar(value=False)
    auto_refresh_cb = ctk.CTkCheckBox(
        extra_controls,
        text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å–µ–∫)",
        variable=tab_frame.auto_refresh_var,
        command=lambda: toggle_auto_refresh(tab_frame)
    )
    auto_refresh_cb.pack(side="left", padx=(10, 0))

def disconnect_all_sessions(tab_frame):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    server = tab_frame.server_entry.get()
    if not server:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–µ—Å—Å–∏–π
    session_count = len(tab_frame.tree.get_children())
    if session_count == 0:
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = messagebox.askyesno(
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ {session_count} —Å–µ—Å—Å–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server}?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
    )
    
    if not confirm:
        return
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
    disconnected = 0
    errors = 0
    
    for item in tab_frame.tree.get_children():
        values = tab_frame.tree.item(item, "values")
        session_id = values[2]
        username = values[1]
        
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            if session_id == "1" or username == "console":
                continue
                
            result = subprocess.run(
                f"logoff {session_id} /server:{server}",
                shell=True,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                disconnected += 1
            else:
                errors += 1
                
        except Exception as e:
            errors += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    tab_frame.refresh_sessions()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    message = f"–û—Ç–∫–ª—é—á–µ–Ω–æ —Å–µ—Å—Å–∏–π: {disconnected}"
    if errors > 0:
        message += f"\n–û—à–∏–±–æ–∫: {errors}"
    
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", message)

def export_sessions(tab_frame):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –≤ CSV —Ñ–∞–π–ª."""
    server = tab_frame.server_entry.get()
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    filename = filedialog.asksaveasfilename(
        defaultextension=".csv",
        filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
        initialfile=f"sessions_{server}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    )
    
    if not filename:
        return
    
    try:
        with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow(["–°–µ—Ä–≤–µ—Ä", "–ò–º—è —Å–µ—Å—Å–∏–∏", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "ID —Å–µ—Å—Å–∏–∏", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞"])
            
            # –î–∞–Ω–Ω—ã–µ
            export_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            for item in tab_frame.tree.get_children():
                values = list(tab_frame.tree.item(item, "values"))
                row = [server] + values + [export_time]
                writer.writerow(row)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ—Å—Å–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filename}")
        
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏:\n{e}")

def toggle_auto_refresh(tab_frame):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if tab_frame.auto_refresh_var.get():
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        start_auto_refresh(tab_frame)
    else:
        # –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        stop_auto_refresh(tab_frame)

def start_auto_refresh(tab_frame):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    def auto_refresh():
        if hasattr(tab_frame, '_auto_refresh_job') and tab_frame.auto_refresh_var.get():
            tab_frame.refresh_sessions()
            tab_frame._auto_refresh_job = tab_frame.after(30000, auto_refresh)  # 30 —Å–µ–∫—É–Ω–¥
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    tab_frame._auto_refresh_job = tab_frame.after(1000, auto_refresh)

def stop_auto_refresh(tab_frame):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if hasattr(tab_frame, '_auto_refresh_job'):
        tab_frame.after_cancel(tab_frame._auto_refresh_job)
        delattr(tab_frame, '_auto_refresh_job')

def add_group_controls(tab_frame):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏."""
    
    # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø–ø
    group_controls = ctk.CTkFrame(tab_frame, fg_color="transparent")
    group_controls.grid(row=3, column=3, padx=5, pady=5, sticky="w")
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä—É–ø–ø
    export_groups_btn = ctk.CTkButton(
        group_controls,
        text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø",
        command=lambda: export_groups(tab_frame),
        width=120
    )
    export_groups_btn.pack(side="left", padx=(0, 5))
    
    # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    copy_all_groups_btn = ctk.CTkButton(
        group_controls,
        text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ",
        command=lambda: copy_all_groups(tab_frame),
        width=120
    )
    copy_all_groups_btn.pack(side="left")

def export_groups(tab_frame):
    """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = tab_frame.group_search_entry.get()
    if not user:
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    filename = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
        initialfile=f"groups_{user}_{datetime.datetime.now().strftime('%Y%m%d')}.txt"
    )
    
    if not filename:
        return
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}\n")
            f.write(f"–î–æ–º–µ–Ω: {tab_frame.combobox_domain.get()}\n")
            f.write(f"–î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("-" * 50 + "\n\n")
            
            groups = []
            for item in tab_frame.group_tree.get_children():
                group = tab_frame.group_tree.item(item, "values")[0]
                groups.append(group)
                f.write(f"{group}\n")
            
            f.write(f"\n\n–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}")
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ì—Ä—É–ø–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filename}")
        
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã:\n{e}")

def copy_all_groups(tab_frame):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
    groups = []
    for item in tab_frame.group_tree.get_children():
        group = tab_frame.group_tree.item(item, "values")[0]
        groups.append(group)
    
    if not groups:
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "\n".join(groups)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
    tab_frame.clipboard_clear()
    tab_frame.clipboard_append(text)
    tab_frame.update()
    
    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")

def add_search_to_sessions(tab_frame):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π."""
    
    # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
    search_frame = ctk.CTkFrame(tab_frame, fg_color="transparent")
    search_frame.grid(row=0, column=2, padx=5, pady=5, sticky="e")
    
    search_label = ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:")
    search_label.pack(side="left", padx=(0, 5))
    
    search_entry = ctk.CTkEntry(search_frame, width=150, placeholder_text="–ò–º—è –∏–ª–∏ ID...")
    search_entry.pack(side="left")
    search_entry.bind("<KeyRelease>", lambda e: filter_sessions(tab_frame, search_entry.get()))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    tab_frame.session_search_entry = search_entry

def filter_sessions(tab_frame, search_text):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É."""
    # –°–±—Ä–æ—Å —Ç–µ–≥–æ–≤
    for item in tab_frame.tree.get_children():
        tab_frame.tree.item(item, tags=())
    
    if not search_text:
        return
    
    # –ü–æ–∏—Å–∫ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    search_lower = search_text.lower()
    found_items = []
    
    for item in tab_frame.tree.get_children():
        values = tab_frame.tree.item(item, "values")
        if any(search_lower in str(v).lower() for v in values):
            tab_frame.tree.item(item, tags=('found',))
            found_items.append(item)
        else:
            tab_frame.tree.item(item, tags=('notfound',))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤
    tab_frame.tree.tag_configure('found', background='#1a472a')
    tab_frame.tree.tag_configure('notfound', foreground='gray50')
    
    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É
    if found_items:
        tab_frame.tree.see(found_items[0])
        tab_frame.tree.selection_set(found_items[0])

def add_printer_ping(tab_frame):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–∏–Ω–≥–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
    
    def ping_printer():
        selected = tab_frame.printer_manager.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä")
            return
        
        ip = tab_frame.printer_manager.tree.item(selected[0], "values")[1]
        
        try:
            result = subprocess.run(
                f"ping -n 1 -w 1000 {ip}",
                shell=True,
                capture_output=True,
                text=True
            )
            
            if "TTL=" in result.stdout:
                messagebox.showinfo("Ping", f"–ü—Ä–∏–Ω—Ç–µ—Ä {ip} –¥–æ—Å—Ç—É–ø–µ–Ω!")
            else:
                messagebox.showwarning("Ping", f"–ü—Ä–∏–Ω—Ç–µ—Ä {ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ping:\n{e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    tab_frame.context_menu.add_separator()
    tab_frame.context_menu.add_command(label="Ping –ø—Ä–∏–Ω—Ç–µ—Ä", command=ping_printer)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
def apply_improvements_to_tab(tab_frame):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ –≤–∫–ª–∞–¥–∫–µ."""
    add_session_controls_to_tab(tab_frame)
    add_group_controls(tab_frame)
    add_search_to_sessions(tab_frame)
    add_printer_ping(tab_frame)

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ home_frame.py
# 2. –í—ã–∑–æ–≤–∏—Ç–µ apply_improvements_to_tab(self) –≤ –∫–æ–Ω—Ü–µ __init__ –∫–ª–∞—Å—Å–∞ TabHomeFrame