import customtkinter as ctk
from tkinter import messagebox
import logging
import winreg
import win32cred
import pywintypes
from cryptography.fernet import Fernet
import base64
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional
from gui.home_frame import TabHomeFrame
from utils.config import ConfigManager
from utils.password_manager import PasswordManager

logger = logging.getLogger(__name__)

class SettingsFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, parent, home_frame, load_from_config: bool = False):
        super().__init__(parent, corner_radius=0, fg_color="transparent")
        
        self.parent = parent
        self.home_frame = home_frame
        self.load_from_config = load_from_config
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.config_manager = ConfigManager()
        self.password_manager = PasswordManager()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI
        self._create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.load_from_config:
            self.after(100, self.load_all_settings)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.main_container = ctk.CTkScrollableFrame(self)
        self.main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.main_container, 
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.title_label.pack(pady=(0, 20))
        
        # –°–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._create_appearance_section()
        self._create_password_section()
        self._create_user_management_section()
        self._create_advanced_section()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_action_buttons()
    
    def _create_section_frame(self, title: str) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            self.main_container,
            text=title,
            font=ctk.CTkFont(size=18, weight="bold")
        )
        section_label.pack(anchor="w", pady=(20, 10))
        
        # –§—Ä–µ–π–º —Å–µ–∫—Ü–∏–∏
        section_frame = ctk.CTkFrame(self.main_container)
        section_frame.pack(fill="x", pady=(0, 10))
        
        return section_frame
    
    def _create_appearance_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞."""
        frame = self._create_section_frame("üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥")
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ UI
        scaling_container = ctk.CTkFrame(frame, fg_color="transparent")
        scaling_container.pack(fill="x", padx=20, pady=(20, 10))
        
        ctk.CTkLabel(
            scaling_container, 
            text="–ú–∞—Å—à—Ç–∞–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            font=ctk.CTkFont(size=14)
        ).pack(side="left", padx=(0, 20))
        
        self.scaling_slider = ctk.CTkSlider(
            scaling_container,
            from_=0.8,
            to=1.5,
            number_of_steps=14,
            command=self._on_scaling_change
        )
        self.scaling_slider.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.scaling_label = ctk.CTkLabel(
            scaling_container,
            text="100%",
            font=ctk.CTkFont(size=14)
        )
        self.scaling_label.pack(side="left")
        
        # –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        theme_container = ctk.CTkFrame(frame, fg_color="transparent")
        theme_container.pack(fill="x", padx=20, pady=(10, 20))
        
        ctk.CTkLabel(
            theme_container,
            text="–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
            font=ctk.CTkFont(size=14)
        ).pack(side="left", padx=(0, 20))
        
        self.appearance_mode_menu = ctk.CTkSegmentedButton(
            theme_container,
            values=["–°–≤–µ—Ç–ª–∞—è", "–¢—ë–º–Ω–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"],
            command=self._on_theme_change
        )
        self.appearance_mode_menu.pack(side="left")
        self.appearance_mode_menu.set("–¢—ë–º–Ω–∞—è")
    
    def _create_password_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è–º–∏."""
        frame = self._create_section_frame("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–º")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä–æ–ª—è
        password_container = ctk.CTkFrame(frame, fg_color="transparent")
        password_container.pack(fill="x", padx=20, pady=20)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        password_input_frame = ctk.CTkFrame(password_container, fg_color="transparent")
        password_input_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(
            password_input_frame,
            text="–ü–∞—Ä–æ–ª—å –¥–ª—è AD:",
            font=ctk.CTkFont(size=14)
        ).pack(anchor="w")
        
        self.password_entry = ctk.CTkEntry(
            password_input_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
            show="*"
        )
        self.password_entry.pack(fill="x", pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
        self.show_password_var = ctk.BooleanVar(value=False)
        self.show_password_checkbox = ctk.CTkCheckBox(
            password_input_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å",
            variable=self.show_password_var,
            command=self._toggle_password_visibility
        )
        self.show_password_checkbox.pack(anchor="w", pady=(5, 0))
        
        # –ú–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        storage_frame = ctk.CTkFrame(password_container, fg_color="transparent")
        storage_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkLabel(
            storage_frame,
            text="–ú–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            font=ctk.CTkFont(size=14)
        ).pack(anchor="w")
        
        self.storage_optionemenu = ctk.CTkOptionMenu(
            storage_frame,
            values=["Credential Manager", "–†–µ–µ—Å—Ç—Ä (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)"],
            command=self._on_storage_method_change
        )
        self.storage_optionemenu.pack(fill="x", pady=(5, 0))
        self.storage_optionemenu.set("Credential Manager")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–º
        button_frame = ctk.CTkFrame(password_container, fg_color="transparent")
        button_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkButton(
            button_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å",
            command=self.save_password,
            width=140
        ).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(
            button_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä–æ–ª—å",
            command=self.clear_password,
            width=140,
            fg_color="transparent",
            border_width=2
        ).pack(side="left")
    
    def _create_user_management_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        frame = self._create_section_frame("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
        
        container = ctk.CTkFrame(frame, fg_color="transparent")
        container.pack(fill="x", padx=20, pady=20)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ctk.CTkLabel(
            container,
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:",
            font=ctk.CTkFont(size=14)
        ).pack(anchor="w")
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞
        list_frame = ctk.CTkFrame(container)
        list_frame.pack(fill="x", pady=(5, 10))
        
        self.users_textbox = ctk.CTkTextbox(list_frame, height=100)
        self.users_textbox.pack(fill="x", padx=10, pady=10)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._load_users_list()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user_control_frame = ctk.CTkFrame(container, fg_color="transparent")
        user_control_frame.pack(fill="x")
        
        self.new_user_entry = ctk.CTkEntry(
            user_control_frame,
            placeholder_text="–õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        self.new_user_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        ctk.CTkButton(
            user_control_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å",
            command=self._add_user,
            width=100
        ).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(
            user_control_frame,
            text="–£–¥–∞–ª–∏—Ç—å",
            command=self._remove_user,
            width=100,
            fg_color="transparent",
            border_width=2
        ).pack(side="left")
    
    def _create_advanced_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        frame = self._create_section_frame("‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        container = ctk.CTkFrame(frame, fg_color="transparent")
        container.pack(fill="x", padx=20, pady=20)
        
        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
        self.autoload_var = ctk.BooleanVar(value=True)
        ctk.CTkCheckBox(
            container,
            text="–ó–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
            variable=self.autoload_var
        ).pack(anchor="w", pady=(0, 10))
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.autosave_var = ctk.BooleanVar(value=True)
        ctk.CTkCheckBox(
            container,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            variable=self.autosave_var
        ).pack(anchor="w", pady=(0, 10))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_frame = ctk.CTkFrame(container, fg_color="transparent")
        log_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkLabel(
            log_frame,
            text="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:",
            font=ctk.CTkFont(size=14)
        ).pack(side="left", padx=(0, 10))
        
        self.log_level_menu = ctk.CTkOptionMenu(
            log_frame,
            values=["DEBUG", "INFO", "WARNING", "ERROR"],
            command=self._on_log_level_change
        )
        self.log_level_menu.pack(side="left")
        self.log_level_menu.set("INFO")
    
    def _create_action_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π."""
        button_frame = ctk.CTkFrame(self.main_container, fg_color="transparent")
        button_frame.pack(fill="x", pady=(20, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ctk.CTkButton(
            button_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.save_all_settings,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(side="left", padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ctk.CTkButton(
            button_frame,
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self._reset_settings,
            height=40,
            fg_color="transparent",
            border_width=2
        ).pack(side="left", padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ctk.CTkButton(
            button_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self._export_config,
            height=40,
            width=100
        ).pack(side="left", padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ctk.CTkButton(
            button_frame,
            text="üì• –ò–º–ø–æ—Ä—Ç",
            command=self._import_config,
            height=40,
            width=100
        ).pack(side="left")
    
    def _on_scaling_change(self, value: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞."""
        percentage = int(value * 100)
        self.scaling_label.configure(text=f"{percentage}%")
        ctk.set_widget_scaling(value)
    
    def _on_theme_change(self, value: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã."""
        theme_map = {
            "–°–≤–µ—Ç–ª–∞—è": "Light",
            "–¢—ë–º–Ω–∞—è": "Dark",
            "–°–∏—Å—Ç–µ–º–Ω–∞—è": "System"
        }
        mode = theme_map.get(value, "System")
        ctk.set_appearance_mode(mode)
        self._update_all_styles(mode)
    
    def _on_storage_method_change(self, method: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
        logger.debug(f"–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {method}")
        self.load_password()
    
    def _on_log_level_change(self, level: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logging.getLogger().setLevel(getattr(logging, level))
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {level}")
    
    def _toggle_password_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è."""
        if self.show_password_var.get():
            self.password_entry.configure(show="")
        else:
            self.password_entry.configure(show="*")
    
    def _update_all_styles(self, mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é
        self._update_context_menu_theme()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        self.home_frame.update_all_treeview_styles(mode)
    
    def _update_context_menu_theme(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é."""
        appearance_mode = ctk.get_appearance_mode()
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        if appearance_mode == "Dark":
            bg = "#2e2e2e"
            fg = "white"
            active_bg = "#5f5f5f"
        else:
            bg = "white"
            fg = "black"
            active_bg = "#cfcfcf"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é
        tab_names = list(self.home_frame.tabview._tab_dict.keys())
        for tab_name in tab_names:
            try:
                tab_frame = self.home_frame.tabview.tab(tab_name)
                if tab_frame.winfo_children():
                    frame = tab_frame.winfo_children()[0]
                    if hasattr(frame, 'context_menu'):
                        frame.context_menu.configure(
                            bg=bg,
                            fg=fg,
                            activebackground=active_bg,
                            activeforeground=fg
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def _load_users_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        users = self.config_manager.get_allowed_users()
        self.users_textbox.delete("1.0", "end")
        self.users_textbox.insert("1.0", "\n".join(users))
    
    def _add_user(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        username = self.new_user_entry.get().strip()
        if not username:
            self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        if self.config_manager.add_allowed_user(username):
            self._load_users_list()
            self.new_user_entry.delete(0, "end")
            self.parent.show_info("–£—Å–ø–µ—Ö", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def _remove_user(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        try:
            selected = self.users_textbox.get("sel.first", "sel.last").strip()
            if not selected:
                self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            confirm = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected}?"
            )
            
            if confirm and self.config_manager.remove_allowed_user(selected):
                self._load_users_list()
                self.parent.show_info("–£—Å–ø–µ—Ö", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected} —É–¥–∞–ª–µ–Ω")
        except Exception:
            self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def _reset_settings(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        if not confirm:
            return
        
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.scaling_slider.set(1.0)
        self._on_scaling_change(1.0)
        
        self.appearance_mode_menu.set("–°–∏—Å—Ç–µ–º–Ω–∞—è")
        self._on_theme_change("–°–∏—Å—Ç–µ–º–Ω–∞—è")
        
        self.storage_optionemenu.set("Credential Manager")
        self.password_entry.delete(0, "end")
        
        self.autoload_var.set(True)
        self.autosave_var.set(True)
        self.log_level_menu.set("INFO")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        default_config = self.config_manager._get_default_config()
        self.config_manager.save_config(default_config)
        
        self.parent.show_info("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _export_config(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        from tkinter import filedialog
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        )
        
        if not filename:
            return
        
        try:
            config = self.config_manager.load_config()
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=4)
            
            self.parent.show_info("–£—Å–ø–µ—Ö", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.parent.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _import_config(self):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        from tkinter import filedialog
        
        filename = filedialog.askopenfilename(
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        )
        
        if not filename:
            return
        
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config_manager.save_config(config)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.load_all_settings()
            
            self.parent.show_info("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.parent.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def save_password(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è."""
        password = self.password_entry.get().strip()
        if not password:
            self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        method = self.storage_optionemenu.get()
        success = self.password_manager.save_password(password, method)
        
        if success:
            self.parent.show_info("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            if self.autosave_var.get():
                self.save_all_settings()
        else:
            self.parent.show_error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
    
    def load_password(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–æ–ª—è."""
        method = self.storage_optionemenu.get()
        password = self.password_manager.load_password(method)
        
        self.password_entry.delete(0, "end")
        if password:
            self.password_entry.insert(0, password)
    
    def clear_password(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–æ–ª—è."""
        method = self.storage_optionemenu.get()
        success = self.password_manager.clear_password(method)
        
        if success:
            self.password_entry.delete(0, "end")
            self.parent.show_info("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω")
        else:
            self.parent.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = {
                "ui_scaling": f"{int(self.scaling_slider.get() * 100)}%",
                "appearance_mode": self._get_theme_english_name(),
                "storage_method": self.storage_optionemenu.get(),
                "autoload": self.autoload_var.get(),
                "autosave": self.autosave_var.get(),
                "log_level": self.log_level_menu.get(),
                "tabs": []
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–æ–∫
            tab_names = list(self.home_frame.tabview._tab_dict.keys())
            for tab_name in tab_names:
                tab_frame = self.home_frame.tabview.tab(tab_name).winfo_children()[0]
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã (–Ω–µ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã)
                groups = []
                for item in tab_frame.group_tree.get_children():
                    groups.append(tab_frame.group_tree.item(item, "values"))
                
                tab_data = {
                    "tab_name": tab_name,
                    "server": tab_frame.server_entry.get(),
                    "domain": tab_frame.combobox_domain.get(),
                    "password_status": tab_frame.password_status_entry.get(),
                    "group_search": tab_frame.group_search_entry.get(),
                    "groups": groups,  # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, –±–µ–∑ —Å–µ—Å—Å–∏–π –∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
                    "session_tree_columns": tab_frame.get_treeview_column_widths(tab_frame.tree),
                    "group_tree_columns": tab_frame.get_treeview_column_widths(tab_frame.group_tree),
                    "printer_tree_columns": tab_frame.get_treeview_column_widths(tab_frame.printer_manager.tree)
                }
                config["tabs"].append(tab_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = self.config_manager.save_config(config)
            
            if success:
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                self.parent.show_info("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                self.parent.show_error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
            self.parent.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def load_all_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª—å
            self.load_password()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self.config_manager.load_config()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
            scaling = config.get("ui_scaling", "100%")
            scale_value = int(scaling.strip('%')) / 100
            self.scaling_slider.set(scale_value)
            self._on_scaling_change(scale_value)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
            theme = config.get("appearance_mode", "System")
            theme_russian = self._get_theme_russian_name(theme)
            self.appearance_mode_menu.set(theme_russian)
            self._on_theme_change(theme_russian)
            
            # –ú–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            storage = config.get("storage_method", "Credential Manager")
            self.storage_optionemenu.set(storage)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.autoload_var.set(config.get("autoload", True))
            self.autosave_var.set(config.get("autosave", True))
            self.log_level_menu.set(config.get("log_level", "INFO"))
            self._on_log_level_change(config.get("log_level", "INFO"))
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏
            for tab_name in list(self.home_frame.tabview._tab_dict.keys()):
                self.home_frame.tabview.delete(tab_name)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            tabs = config.get("tabs", [])
            if not tabs:
                # –ï—Å–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                logger.debug("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–∫, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ")
                for i in range(1, 4):
                    tab_name = f"–°–µ—Ä–≤–µ—Ä {i}"
                    tab = self.home_frame.tabview.add(tab_name)
                    TabHomeFrame(tab, tab_name, self.parent, load_from_config=False).pack(fill="both", expand=True)
            else:
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                for tab_data in tabs:
                    tab = self.home_frame.tabview.add(tab_data["tab_name"])
                    tab_frame = TabHomeFrame(
                        tab,
                        tab_data["tab_name"],
                        self.parent,
                        load_from_config=True,
                        config_data=tab_data
                    )
                    tab_frame.pack(fill="both", expand=True)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
                    for session in tab_data.get("sessions", []):
                        tab_frame.tree.insert("", "end", values=session)
                    
                    for group in tab_data.get("groups", []):
                        tab_frame.group_tree.insert("", "end", values=group)
                    
                    for printer in tab_data.get("printers", []):
                        tab_frame.printer_manager.tree.insert("", "end", values=printer)
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            for i in range(1, 4):
                tab_name = f"–°–µ—Ä–≤–µ—Ä {i}"
                tab = self.home_frame.tabview.add(tab_name)
                TabHomeFrame(tab, tab_name, self.parent, load_from_config=False).pack(fill="both", expand=True)
    
    def _get_theme_english_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã."""
        current = self.appearance_mode_menu.get()
        theme_map = {
            "–°–≤–µ—Ç–ª–∞—è": "Light",
            "–¢—ë–º–Ω–∞—è": "Dark",
            "–°–∏—Å—Ç–µ–º–Ω–∞—è": "System"
        }
        return theme_map.get(current, "System")
    
    def _get_theme_russian_name(self, english_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã."""
        theme_map = {
            "Light": "–°–≤–µ—Ç–ª–∞—è",
            "Dark": "–¢—ë–º–Ω–∞—è",
            "System": "–°–∏—Å—Ç–µ–º–Ω–∞—è"
        }
        return theme_map.get(english_name, "–°–∏—Å—Ç–µ–º–Ω–∞—è")