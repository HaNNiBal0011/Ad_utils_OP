import customtkinter as ctk
import os
import sys
from PIL import Image
from pathlib import Path
import logging
from typing import Dict, Callable

logger = logging.getLogger(__name__)

class NavigationFrame(ctk.CTkFrame):
    """–§—Ä–µ–π–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏."""
    
    def __init__(self, parent, select_frame_callback: Callable):
        super().__init__(parent, corner_radius=0)
        
        self.select_frame_callback = select_frame_callback
        self.buttons: Dict[str, ctk.CTkButton] = {}
        self.active_button = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.grid_rowconfigure(10, weight=1)  # –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–∑—É
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self._load_images()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._create_header()
        self._create_navigation_buttons()
        self._create_footer()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        self.set_active_button("home")
    
    def _load_images(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        if getattr(sys, 'frozen', False):
            base_path = Path(sys._MEIPASS)
        else:
            base_path = Path(__file__).parent.parent
        
        image_path = base_path / "test_images"
        
        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        icon_size = (20, 20)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            self.home_image = self._load_image(image_path, "home", icon_size)
            self.chat_image = self._load_image(image_path, "chat", icon_size)
            self.settings_image = self._load_image(image_path, "add_user", icon_size)
            self.vnc_image = self._load_image(image_path, "vnc", icon_size)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ fallback
            self._create_fallback_images(icon_size)
    
    def _load_image(self, base_path: Path, name: str, size: tuple) -> ctk.CTkImage:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        light_path = base_path / f"{name}_dark.png"
        dark_path = base_path / f"{name}_light.png"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not light_path.exists() or not dark_path.exists():
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")
            return self._create_placeholder_image(size)
        
        return ctk.CTkImage(
            light_image=Image.open(light_path),
            dark_image=Image.open(dark_path),
            size=size
        )
    
    def _create_placeholder_image(self, size: tuple) -> ctk.CTkImage:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–∑–∞–≥–ª—É—à–∫–∏."""
        placeholder = Image.new('RGBA', size, (128, 128, 128, 255))
        return ctk.CTkImage(light_image=placeholder, dark_image=placeholder, size=size)
    
    def _create_fallback_images(self, size: tuple):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        self.home_image = self._create_placeholder_image(size)
        self.chat_image = self._create_placeholder_image(size)
        self.settings_image = self._create_placeholder_image(size)
        self.powershell_image = self._create_placeholder_image(size)
    
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
        # –õ–æ–≥–æ—Ç–∏–ø/–∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.header_frame.grid(row=0, column=0, padx=10, pady=(20, 10), sticky="ew")
        
        self.logo_label = ctk.CTkLabel(
            self.header_frame, 
            text="RDP Manager", 
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.logo_label.pack()
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.separator = ctk.CTkFrame(self, height=2, fg_color=("gray70", "gray30"))
        self.separator.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="ew")
    
    def _create_navigation_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        button_config = [
            ("home", "Shadow RDP", self.home_image, 2),
            ("frame_3", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.settings_image, 3),
            ("vnc", "VNC Viewer", self.vnc_image, 4),  # –î–æ–±–∞–≤–ª—è–µ–º VNC
            # ("powershell", "PowerShell", self.powershell_image, 5),  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
        ]
        
        for name, text, image, row in button_config:
            button = self._create_button(name, text, image, row)
            self.buttons[name] = button
    
    def _create_button(self, name: str, text: str, image: ctk.CTkImage, row: int) -> ctk.CTkButton:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        button = ctk.CTkButton(
            self,
            corner_radius=6,
            height=40,
            border_spacing=10,
            text=text,
            fg_color="transparent",
            text_color=("gray10", "gray90"),
            hover_color=("gray70", "gray30"),
            image=image,
            anchor="w",
            command=lambda: self._on_button_click(name)
        )
        button.grid(row=row, column=0, sticky="ew", padx=10, pady=2)
        return button
    
    def _create_footer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.user_info_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.user_info_frame.grid(row=9, column=0, padx=10, pady=10, sticky="ew")
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = os.getenv("USERNAME", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.user_label = ctk.CTkLabel(
            self.user_info_frame,
            text=f"üë§ {username}",
            font=ctk.CTkFont(size=12)
        )
        self.user_label.pack()
        
        # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.version_label = ctk.CTkLabel(
            self,
            text="v1.0.0",
            font=ctk.CTkFont(size=10),
            text_color=("gray50", "gray60")
        )
        self.version_label.grid(row=10, column=0, padx=10, pady=(0, 10), sticky="s")
    
    def _on_button_click(self, frame_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        self.select_frame_callback(frame_name)
        self.set_active_button(frame_name)
    
    def set_active_button(self, name: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏."""
        # –°–±—Ä–æ—Å —Å—Ç–∏–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if self.active_button and self.active_button in self.buttons:
            self.buttons[self.active_button].configure(
                fg_color="transparent",
                text_color=("gray10", "gray90")
            )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if name in self.buttons:
            self.buttons[name].configure(
                fg_color=("gray75", "gray25"),
                text_color=("gray10", "gray90")
            )
            self.active_button = name
    
    def add_custom_button(self, name: str, text: str, image: ctk.CTkImage = None, 
                         position: int = None) -> ctk.CTkButton:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        
        Args:
            name: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–Ω–æ–ø–∫–∏
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            position: –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏ (row –≤ —Å–µ—Ç–∫–µ)
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        """
        if name in self.buttons:
            logger.warning(f"–ö–Ω–æ–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return self.buttons[name]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        if position is None:
            position = len(self.buttons) + 2
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        if image is None:
            image = self._create_placeholder_image((20, 20))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        button = self._create_button(name, text, image, position)
        self.buttons[name] = button
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {name}")
        return button
    
    def remove_button(self, name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        if name not in self.buttons:
            logger.warning(f"–ö–Ω–æ–ø–∫–∞ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        button = self.buttons[name]
        button.destroy()
        del self.buttons[name]
        
        # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        if self.active_button == name:
            self.active_button = None
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º home –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if "home" in self.buttons:
                self.set_active_button("home")
                self.select_frame_callback("home")
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {name}")
    
    def update_button_text(self, name: str, new_text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏."""
        if name in self.buttons:
            self.buttons[name].configure(text=new_text)
    
    def update_button_image(self, name: str, new_image: ctk.CTkImage):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏."""
        if name in self.buttons:
            self.buttons[name].configure(image=new_image)
    
    def set_button_state(self, name: str, state: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏.
        
        Args:
            name: –ò–º—è –∫–Ω–æ–ø–∫–∏
            state: "normal" –∏–ª–∏ "disabled"
        """
        if name in self.buttons:
            self.buttons[name].configure(state=state)
