# build.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ RDP Manager –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Windows.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyInstaller –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è standalone EXE.
"""

import os
import sys
import shutil
from pathlib import Path
import PyInstaller.__main__

def clean_build_dirs():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫."""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"–û—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ .spec —Ñ–∞–π–ª–∞
    spec_file = 'RDPManager.spec'
    if os.path.exists(spec_file):
        os.remove(spec_file)
        print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {spec_file}")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    required_files = [
        'main.py',
        'app.py',
        'config.json',
        'gui/navigation.py',
        'gui/home_frame.py',
        'gui/settings_frame.py',
        'utils/auth.py',
        'utils/ad_utils.py',
        'utils/printer_utils.py',
        'utils/config.py',
        'utils/password_manager.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def create_version_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏."""
    version_content = """
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'IT Department'),
        StringStruct(u'FileDescription', u'RDP Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RDP —Å–µ—Å—Å–∏—è–º–∏'),
        StringStruct(u'FileVersion', u'1.0.0.0'),
        StringStruct(u'InternalName', u'RDPManager'),
        StringStruct(u'LegalCopyright', u'¬© 2024 IT Department'),
        StringStruct(u'OriginalFilename', u'RDPManager.exe'),
        StringStruct(u'ProductName', u'RDP Manager'),
        StringStruct(u'ProductVersion', u'1.0.0.0')])
      ]),
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"""
    
    with open('version.txt', 'w', encoding='utf-8') as f:
        f.write(version_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏")
    return 'version.txt'

def build_exe():
    """–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
    print("\nüî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É RDP Manager...\n")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    clean_build_dirs()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not check_requirements():
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
    version_file = create_version_file()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PyInstaller
    args = [
        'main.py',                           # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
        '--name=RDPManager',                 # –ò–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
        '--onefile',                         # –û–¥–∏–Ω —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ø–∞–ø–∫–∏
        '--windowed',                        # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏
        '--clean',                           # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        '--noconfirm',                       # –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        
        # –ò–∫–æ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        '--icon=assets/icon.ico' if os.path.exists('assets/icon.ico') else '--icon=NONE',
        
        # –í–µ—Ä—Å–∏—è
        f'--version-file={version_file}',
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        '--add-data=config.json;.',
        '--add-data=test_images;test_images',
        
        # –°–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        '--hidden-import=win32timezone',
        '--hidden-import=win32api',
        '--hidden-import=PIL._tkinter_finder',
        '--hidden-import=pkg_resources.py2_warn',
        
        # –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–∫–µ—Ç–æ–≤
        '--collect-all=customtkinter',
        '--collect-all=pyad',
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)
        '--exclude-module=matplotlib',
        '--exclude-module=numpy',
        '--exclude-module=pandas',
        '--exclude-module=scipy',
        '--exclude-module=tkinter.test',
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        '--optimize=2',
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('assets'):
        args.append('--add-data=assets;assets')
    
    print("üì¶ –ó–∞–ø—É—Å–∫ PyInstaller —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    for arg in args:
        if arg.startswith('--'):
            print(f"   {arg}")
    
    print("\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n")
    
    try:
        # –ó–∞–ø—É—Å–∫ PyInstaller
        PyInstaller.__main__.run(args)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        exe_path = Path('dist/RDPManager.exe')
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –§–∞–π–ª: {exe_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} –ú–ë")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if os.path.exists(version_file):
                os.remove(version_file)
            
            return True
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def create_installer_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Inno Setup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
    inno_script = """
[Setup]
AppName=RDP Manager
AppVersion=1.0.0
AppPublisher=IT Department
AppPublisherURL=http://internal.company.com
DefaultDirName={autopf}\RDPManager
DefaultGroupName=RDP Manager
UninstallDisplayIcon={app}\RDPManager.exe
Compression=lzma2
SolidCompression=yes
OutputDir=installer
OutputBaseFilename=RDPManager_Setup

[Files]
Source: "dist\RDPManager.exe"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\RDP Manager"; Filename: "{app}\RDPManager.exe"
Name: "{group}\–£–¥–∞–ª–∏—Ç—å RDP Manager"; Filename: "{uninstallexe}"
Name: "{autodesktop}\RDP Manager"; Filename: "{app}\RDPManager.exe"

[Run]
Filename: "{app}\RDPManager.exe"; Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å RDP Manager"; Flags: nowait postinstall skipifsilent
"""
    
    with open('installer.iss', 'w', encoding='utf-8') as f:
        f.write(inno_script)
    
    print("\nüìù –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è Inno Setup: installer.iss")
    print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Inno Setup Compiler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞")

if __name__ == "__main__":
    print("=" * 50)
    print("RDP Manager - –°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PyInstaller
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller {PyInstaller.__version__} –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install pyinstaller")
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    if build_exe():
        print("\n" + "=" * 50)
        print("üéâ –ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ RDPManager.exe –≤ –ø–∞–ø–∫–µ 'dist'")
        print("=" * 50)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
        response = input("\n–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞? (y/n): ").lower()
        if response == 'y':
            create_installer_script()
    else:
        print("\n" + "=" * 50)
        print("‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("=" * 50)
        sys.exit(1)
