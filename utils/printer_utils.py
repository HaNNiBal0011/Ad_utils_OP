# utils/printer_utils.py
import customtkinter as ctk
from tkinter import ttk
import json
import os
import sys
import logging
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import threading
import requests
from dataclasses import dataclass
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

@dataclass
class Printer:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
    name: str
    ip: str
    server: str
    model: Optional[str] = None
    location: Optional[str] = None
    status: Optional[str] = None
    last_checked: Optional[datetime] = None

class PrinterManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏."""
    
    def __init__(self, parent):
        self.parent = parent
        self.printers: List[Printer] = []
        self.filtered_printers: List[Printer] = []
        self.tree = None
        self.search_entry = None
        self.status_label = None
        
        # –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        self._status_cache: Dict[str, Tuple[str, datetime]] = {}
        self._cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        self._status_check_thread = None
        self._stop_status_check = threading.Event()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        self._load_printers()
    
    def setup_ui(self, row: int, column: int, tree_row: int, 
                 tree_height: int = 10, tree_columns: Optional[Dict] = None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_container = ctk.CTkFrame(self.parent, fg_color="transparent")
        search_container.grid(row=row, column=column, padx=5, pady=5, sticky="ew")
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_entry = ctk.CTkEntry(
            search_container,
            width=200,
            placeholder_text="–ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤..."
        )
        self.search_entry.pack(side="left", padx=(0, 5))
        self.search_entry.bind("<KeyRelease>", self._on_search_change)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(search_container, fg_color="transparent")
        button_frame.pack(side="right")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_button = ctk.CTkButton(
            button_frame,
            text="üîç",
            width=30,
            command=self.search_printers
        )
        self.search_button.pack(side="left", padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = ctk.CTkButton(
            button_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.refresh_printers,
            width=100
        )
        self.refresh_button.pack(side="left")
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(
            search_container,
            text="",
            font=ctk.CTkFont(size=12),
            text_color=("gray50", "gray70")
        )
        self.status_label.pack(side="left", padx=(10, 0))
        
        # –§—Ä–µ–π–º –¥–ª—è Treeview
        self.printer_frame = ctk.CTkFrame(self.parent)
        self.printer_frame.grid(row=tree_row, column=column, padx=5, pady=5, sticky="nsew")
        self.printer_frame.grid_rowconfigure(0, weight=1)
        self.printer_frame.grid_columnconfigure(0, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Treeview
        self._setup_treeview(tree_height, tree_columns)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.refresh_printers()
    
    def _setup_treeview(self, height: int, column_widths: Optional[Dict]):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."""
        columns = ("Printer", "IP", "Server", "Status")  # –£–±—Ä–∞–ª–∏ Model
        self.tree = ttk.Treeview(
            self.printer_frame,
            columns=columns,
            show="headings",
            height=height
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_config = {
            "Printer": ("–ü—Ä–∏–Ω—Ç–µ—Ä", 180),
            "IP": ("IP –∞–¥—Ä–µ—Å", 120),
            "Server": ("–°–µ—Ä–≤–µ—Ä", 100),
            "Status": ("–°—Ç–∞—Ç—É—Å", 100)
        }
        
        default_widths = {col: width for col, (_, width) in column_config.items()}
        widths = column_widths or default_widths
        
        for col, (heading, default_width) in column_config.items():
            self.tree.heading(col, text=heading, command=lambda c=col: self._sort_by_column(c))
            width = widths.get(col, default_width)
            self.tree.column(col, width=width, stretch=True)
        
        
        self.tree.grid(row=0, column=0, sticky="nsew")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Double-1>", self._on_double_click)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        self.tree.tag_configure("online", foreground="green")
        self.tree.tag_configure("offline", foreground="red")
        self.tree.tag_configure("warning", foreground="orange")
        self.tree.tag_configure("unknown", foreground="gray")
    
    def _load_printers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
        file_path = self._get_resource_path("test_images/printers.json")
        
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                
            self.printers = []
            for item in data:
                printer = Printer(
                    name=item.get("Printer", ""),
                    ip=item.get("IP", ""),
                    server=item.get("Server", ""),
                    model=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                    location=item.get("Location"),
                    status="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )
                self.printers.append(printer)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.printers)} –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
            
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            self._create_default_printer_file(file_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    def _get_resource_path(self, relative_path: str) -> Path:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å—É."""
        if getattr(sys, 'frozen', False):
            base_path = Path(sys._MEIPASS)
        else:
            base_path = Path(__file__).parent.parent
        return base_path / relative_path
    
    def _create_default_printer_file(self, file_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        default_printers = [
            {"Printer": "HP_LaserJet_1", "IP": "192.168.1.100", "Server": "TS-IT0", "Location": "IT Office, 2nd Floor"},
            {"Printer": "Canon_Color_1", "IP": "192.168.1.101", "Server": "TS-IT0", "Location": "Reception, 1st Floor"},
            {"Printer": "Xerox_MFP_1", "IP": "192.168.1.102", "Server": "TS-HR0", "Location": "HR Department, 3rd Floor"},
        ]
        
        try:
            file_path.parent.mkdir(parents=True, exist_ok=True)
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default_printers, f, ensure_ascii=False, indent=4)
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã
            self._load_printers()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    def refresh_printers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä—É."""
        server_filter = self.parent.server_entry.get().strip().lower()
        search_text = self.search_entry.get().strip().lower()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        self.filtered_printers = []
        seen_printers = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        
        for printer in self.printers:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É
            if server_filter and printer.server.lower() != server_filter:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
            if search_text:
                if not any(search_text in str(getattr(printer, attr, "")).lower() 
                        for attr in ['name', 'ip', 'server', 'location']):
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
            # –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏ –ø–æ IP –∞–¥—Ä–µ—Å—É, –Ω–æ –ø—Ä–∏ –æ–±—â–µ–º –ø–æ–∏—Å–∫–µ 
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä —Å –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            printer_key = printer.ip
            
            if printer_key not in seen_printers:
                seen_printers.add(printer_key)
                self.filtered_printers.append(printer)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self._update_treeview()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status_text = f"–ù–∞–π–¥–µ–Ω–æ: {len(self.filtered_printers)} –∏–∑ {len(self.printers)}"
        if server_filter:
            status_text += f" (—Å–µ—Ä–≤–µ—Ä: {server_filter})"
        self.status_label.configure(text=status_text)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
        if self.filtered_printers:
            self._start_status_check()
    
    def _update_treeview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selected = self.tree.selection()
        selected_values = []
        for item in selected:
            selected_values.append(self.tree.item(item, "values"))
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.tree.delete(*self.tree.get_children())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
        for printer in self.filtered_printers:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            tag = self._get_status_tag(printer.status)
            
            values = (
                printer.name,
                printer.ip,
                printer.server,
                printer.status
            )
            
            item = self.tree.insert("", "end", values=values, tags=(tag,))
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if values in selected_values:
                self.tree.selection_add(item)
    
    def _get_status_tag(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
        status_lower = status.lower()
        if "–æ–Ω–ª–∞–π–Ω" in status_lower or "online" in status_lower:
            return "online"
        elif "–æ—Ñ–ª–∞–π–Ω" in status_lower or "offline" in status_lower:
            return "offline"
        elif "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" in status_lower or "warning" in status_lower:
            return "warning"
        else:
            return "unknown"
    
    def search_printers(self):
        """–ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        self.refresh_printers()
    
    def _on_search_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
        self.refresh_printers()
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É."""
        selected = self.tree.selection()
        if not selected:
            return
        
        values = self.tree.item(selected[0], "values")
        if len(values) > 1:
            ip = values[1]
            if ip:
                # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                import webbrowser
                webbrowser.open(f"http://{ip}")
                logger.info(f"–û—Ç–∫—Ä—ã—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {ip}")
    
    def _sort_by_column(self, column: str):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–æ–ª–æ–Ω–∫–µ."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = [(self.tree.item(child, "values"), child) for child in self.tree.get_children()]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
        columns = self.tree["columns"]
        col_index = columns.index(column)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º
        data.sort(key=lambda x: x[0][col_index])
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for index, (values, item) in enumerate(data):
            self.tree.move(item, "", index)
    
    def _start_status_check(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        self._stop_status_check.set()
        if self._status_check_thread and self._status_check_thread.is_alive():
            self._status_check_thread.join(timeout=1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self._stop_status_check.clear()
        self._status_check_thread = threading.Thread(
            target=self._check_printer_statuses,
            daemon=True
        )
        self._status_check_thread.start()
    
    def _check_printer_statuses(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        for printer in self.filtered_printers:
            if self._stop_status_check.is_set():
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if printer.ip in self._status_cache:
                cached_status, cached_time = self._status_cache[printer.ip]
                if datetime.now() - cached_time < timedelta(seconds=self._cache_timeout):
                    printer.status = cached_status
                    self.parent.after(0, self._update_printer_status_in_tree, printer)
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = self._check_single_printer_status(printer.ip)
            printer.status = status
            printer.last_checked = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._status_cache[printer.ip] = (status, datetime.now())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.parent.after(0, self._update_printer_status_in_tree, printer)
    
    def _check_single_printer_status(self, ip: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ HTTP
            response = requests.get(f"http://{ip}", timeout=2)
            if response.status_code == 200:
                return "–û–Ω–ª–∞–π–Ω"
            else:
                return f"–û—à–∏–±–∫–∞ HTTP {response.status_code}"
        except requests.ConnectionError:
            return "–û—Ñ–ª–∞–π–Ω"
        except requests.Timeout:
            return "–¢–∞–π–º-–∞—É—Ç"
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ {ip}: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _update_printer_status_in_tree(self, printer: Printer):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        for item in self.tree.get_children():
            values = list(self.tree.item(item, "values"))
            if values[1] == printer.ip:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ IP
                values[3] = printer.status
                tag = self._get_status_tag(printer.status)
                self.tree.item(item, values=values, tags=(tag,))
                break
    
    def export_printer_list(self, filename: str):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª."""
        try:
            data = []
            for printer in self.printers:
                data.append({
                    "Printer": printer.name,
                    "IP": printer.ip,
                    "Server": printer.server,
                    "Location": printer.location
                })
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            
            logger.info(f"–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
            return False
    
    def import_printer_list(self, filename: str):
        """–ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.printers = []
            for item in data:
                printer = Printer(
                    name=item.get("Printer", ""),
                    ip=item.get("IP", ""),
                    server=item.get("Server", ""),
                    model=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                    location=item.get("Location"),
                    status="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )
                self.printers.append(printer)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_path = self._get_resource_path("test_images/printers.json")
            with open(default_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.refresh_printers()
            
            logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.printers)} –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
            return False
    
    def add_printer(self, printer: Printer) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            for existing in self.printers:
                if existing.ip == printer.ip:
                    logger.warning(f"–ü—Ä–∏–Ω—Ç–µ—Ä —Å IP {printer.ip} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
            
            self.printers.append(printer)
            self._save_printers()
            self.refresh_printers()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä: {printer.name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {e}")
            return False
    
    def remove_printer(self, ip: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ IP –∞–¥—Ä–µ—Å—É."""
        try:
            self.printers = [p for p in self.printers if p.ip != ip]
            self._save_printers()
            self.refresh_printers()
            
            logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä —Å IP: {ip}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {e}")
            return False
    
    def _save_printers(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."""
        try:
            data = []
            for printer in self.printers:
                data.append({
                    "Printer": printer.name,
                    "IP": printer.ip,
                    "Server": printer.server,
                    "Location": printer.location
                })
            
            file_path = self._get_resource_path("test_images/printers.json")
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    def get_printer_by_ip(self, ip: str) -> Optional[Printer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ IP –∞–¥—Ä–µ—Å—É."""
        for printer in self.printers:
            if printer.ip == ip:
                return printer
        return None
    
    def get_printers_by_server(self, server: str) -> List[Printer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞."""
        return [p for p in self.printers if p.server.lower() == server.lower()]
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤
        self._stop_status_check.set()
        if self._status_check_thread and self._status_check_thread.is_alive():
            self._status_check_thread.join(timeout=1)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        self._status_cache.clear()
    
    def _adjust_columns_width(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Ñ—Ä–µ–π–º–∞."""
        try:
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            self.parent.update_idletasks()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É (–º–∏–Ω—É—Å —Å–∫—Ä–æ–ª–ª–±–∞—Ä)
            available_width = self.printer_frame.winfo_width() - 20
            
            if available_width > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
                if hasattr(self.parent, 'config_data'):
                    saved_columns = self.parent.config_data.get("printer_tree_columns", {})
                    
                    if saved_columns and all(col in saved_columns for col in self.tree["columns"]):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                        for col in self.tree["columns"]:
                            self.tree.column(col, width=saved_columns[col])
                        return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                for col, (_, percentage) in self.column_config.items():
                    width = int(available_width * percentage)
                    self.tree.column(col, width=width)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    def _on_frame_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–µ–π–º–∞."""
        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if hasattr(self, '_resize_job'):
            self.parent.after_cancel(self._resize_job)
        self._resize_job = self.parent.after(150, self._adjust_columns_width)